{
  "inputs": {
    "repository": "Moonsong-Labs/ai-nexus",
    "pr_num": "87"
  },
  "outputs": {
    "output": "diff --git a/project_memories/global.md b/project_memories/global.md\nindex 457ef9d..bde4c32 100644\n--- a/project_memories/global.md\n+++ b/project_memories/global.md\n@@ -17,9 +17,14 @@\n     *   A common `BaseConfiguration` in `src/common/config.py`.\n     *   Agent-specific `Configuration` dataclasses (e.g., in `src/orchestrator/configuration.py`, `src/requirement_gatherer/configuration.py`) that subclass `BaseConfiguration`.\n     *   A new `AgentConfiguration` from `src/common/configuration.py` (implied) used by the Coder agent.\n+    *   Agent configurations (e.g., `self._agent_config` in `AgentGraph` subclasses) are now more explicitly passed to internal factory functions that create graph nodes, rather than being retrieved from a runtime `RunnableConfig` within node functions.\n 7.  **Asynchronous Operations:** The system heavily utilizes `async` and `await` for non-blocking operations within the agent graphs.\n 8.  **`langmem` Integration:** Provides semantic memory capabilities (storage, search) for agents, typically managed via the `Agent` class and `SemanticMemory` component for agents following the `agent_template`. Other agents like Requirement Gatherer might implement memory tools differently.\n-9.  **`AgentGraph` (NEW):** A common base class (`src/common/graph.py`) for defining agent graphs, promoting modularity. Used by Orchestrator, Requirement Gatherer, and now Coder. Its `__init__` method takes an agent-specific configuration (e.g., `base_config: BaseConfiguration` for Orchestrator/Requirement Gatherer, or `name: str, agent_config: AgentConfiguration` for Coder), and optional `checkpointer` and `store`, suggesting an evolving or flexible signature.\n+9.  **`AgentGraph` (NEW):** A common base class (`src/common/graph.py`) for defining agent graphs, promoting modularity. Used by Orchestrator, Requirement Gatherer, Coder, and Task Manager.\n+    *   Its `__init__` method takes an agent-specific configuration (e.g., `base_config: BaseConfiguration` for Orchestrator/Requirement Gatherer, or `name: str, agent_config: AgentConfiguration` for Coder), and optional `checkpointer` and `store`, suggesting an evolving or flexible signature. This `agent_config` is stored as `self._agent_config`.\n+    *   Invocation of the graph has changed: the `ainvoke` method on `AgentGraph` instances is removed. Invocation is now typically done via `compiled_graph.ainvoke(state, graph_instance.create_runnable_config(run_time_config))`.\n+    *   The `_merge_config` method has been removed.\n+    *   A new `create_runnable_config(self, config: RunnableConfig | None = None) -> AgentConfiguration` method (note: source code type hint is `AgentConfiguration`, but it returns the `RunnableConfig` object) prepares the `RunnableConfig` for graph invocation by merging `self._agent_config.langgraph_configurables` with any configurables from the passed `config`. It no longer embeds the full `agent_config` into the `RunnableConfig` under an \"agent_config\" key.\n \n \n ## 2. The Memory Bank System (Shift from Conceptual to `langmem`)\n@@ -85,13 +90,16 @@ Most agents in AI Nexus follow a common structural and operational pattern, large\n *   **`configuration.py` (Typical Structure - `src/agent_template/configuration.py`):** (As previously described, with `use_static_mem` and updated default model)\n *   **`state.py` (Typical Structure - `src/agent_template/state.py`):** (As previously described, with `user_id`)\n *   **`agent.py` (NEW - `src/agent_template/agent.py`):** (As previously described, handles LLM interaction and `langmem` via `SemanticMemory`)\n-*   **`graph.py` (Core Logic - Revised Flow from `src/agent_template/graph.py`):** (As previously described, uses `Agent` class, `ToolNode`, `tools_condition`)\n+*   **`graph.py` (Core Logic - Revised Flow from `src/agent_template/graph.py`):**\n+    *   The `AgentGraph` subclass in `agent_template` (and other similar agents) now passes its `self._agent_config` directly to its node factory functions (e.g., `_create_call_model`).\n+    *   Node functions like `call_model` no longer retrieve `agent_config` from the runtime `config` (e.g., `config[\"configurable\"][\"agent_config\"]`) but use the configuration object passed during their creation.\n+    *   Still uses `Agent` class, `ToolNode`, `tools_condition`.\n *   **`tools.py` (Utility Tools - `src/agent_template/tools.py`):** (As previously described, `file_dump` tool, `upsert_memory` removed)\n *   **`memory.py` (`src/agent_template/memory.py`):** DELETED.\n *   **`src/common/components/memory.py` (NEW):** (As previously described, `SemanticMemory` class, static memory loading, `langmem` tool creation)\n *   **`prompts.py` (`src/agent_template/prompts.py`):** (As previously described, instruction to mention memory retrieval)\n \n-**4.2. `AgentGraph` based Architecture (NEW - e.g., Orchestrator, Requirement Gatherer, Coder)**\n+**4.2. `AgentGraph` based Architecture (NEW - e.g., Orchestrator, Requirement Gatherer, Coder, Task Manager)**\n \n A newer pattern utilizes a common base class for more modular graph definitions.\n \n@@ -105,20 +113,23 @@ A newer pattern utilizes a common base class for more modular graph definitions.\n         model: str = \"google_genai:gemini-2.0-flash\"\n         provider: str | None = None\n         # Agent-specific prompts or other configs are added in subclasses\n+        # Must be structurally compatible with AgentConfiguration for langgraph_configurables if used with AgentGraph\n     ```\n *   **`src/common/configuration.py` (NEW - Implied by PR):**\n-    *   Implied new module defining `AgentConfiguration`. This configuration type is used by the Coder agent when initializing its `AgentGraph` subclasses. Its specific structure and relationship to `BaseConfiguration` (from `common.config.py`) are not detailed in PR#79.\n+    *   Implied new module defining `AgentConfiguration`. This configuration type is used by the Coder agent and is the type of `_agent_config` in the `common.graph.AgentGraph` base class. It is expected to have a `langgraph_configurables` attribute.\n *   **`src/common/graph.py` (NEW):**\n     *   Defines an abstract base class `AgentGraph(ABC)`.\n     *   `__init__(...)`: Initializes the graph. The constructor signature appears to be flexible or evolving:\n-        *   Older agent patterns (Orchestrator, Requirement Gatherer) initialize `AgentGraph` subclasses passing their specific configuration which is a subclass of `BaseConfiguration` (from `src/common/config.py`), effectively using `base_config`.\n-        *   Newer usage (e.g., Coder agent as per PR#79) involves passing `name: str` and `agent_config: AgentConfiguration` (from `src/common/configuration.py`) to the `AgentGraph` constructor.\n+        *   Older agent patterns (Orchestrator, Requirement Gatherer) initialize `AgentGraph` subclasses passing their specific configuration which is a subclass of `BaseConfiguration` (from `src/common/config.py`). This configuration is stored in `self._agent_config` (typed as `AgentConfiguration` in the base class).\n+        *   Newer usage (e.g., Coder agent as per PR#79) involves passing `name: str` and `agent_config: AgentConfiguration` (from `src/common/configuration.py`) to the `AgentGraph` constructor, which is stored in `self._agent_config`.\n         *   The constructor also takes optional `checkpointer` and `store`.\n     *   `create_builder() -> StateGraph` (abstract method): To be implemented by subclasses to define the graph.\n     *   `compiled_graph`: Property to get or compile the graph.\n-    *   `ainvoke(state, config)`: Invokes the compiled graph, merging instance config with call-time config.\n+    *   `ainvoke(state, config)`: Method REMOVED. Invocation is now typically `compiled_graph.ainvoke(state, graph_instance.create_runnable_config(config))`.\n+    *   `_merge_config(config)`: Method REMOVED.\n+    *   `create_runnable_config(self, config: RunnableConfig | None = None) -> AgentConfiguration` (NEW): (Note: source code type hint is `AgentConfiguration`, but it returns the `RunnableConfig` object). Prepares the `RunnableConfig` for graph invocation by merging `self._agent_config.langgraph_configurables` with any configurables from the passed `config`. It no longer embeds the full `agent_config` into the `RunnableConfig` under an \"agent_config\" key.\n \n-Agents like Orchestrator, Requirement Gatherer, and now Coder subclass `AgentGraph` and define their specific configurations and graph structures. Graph construction is more modular, often using factory functions or direct builder methods.\n+Agents like Orchestrator, Requirement Gatherer, Coder, and Task Manager subclass `AgentGraph`. Their `create_builder` methods now typically pass `self._agent_config` to their internal node factory functions. Node functions themselves (e.g., `call_model`, `orchestrate`) use this directly provided configuration instead of extracting it from the runtime `config`.\n \n \n ## 5. Specific Agent Details\n@@ -131,9 +142,10 @@ Agents like Orchestrator, Requirement Gatherer, and now Coder subclass `AgentGra\n     *   The dedicated `src/orchestrator/configuration.py` file from a previous state was deleted, but this PR re-introduces it with the new structure.\n     *   **`src/orchestrator/graph.py` now defines `AgentsConfig` dataclass** to manage agent stubs (e.g., `requirements.use_stub`) and agent-specific features (e.g., `requirements.use_human_ai`).\n *   **Graph Logic (`src/orchestrator/graph.py`):**\n-    *   The `orchestrate` node (created by `_create_orchestrate` factory) uses the system prompt from the config (including current time). LLM is initialized within `create_builder`.\n-    *   The `delegate_to` routing function (created by `_create_delegate_to` factory) is updated.\n-    *   Integrates other agent graphs/stubs; for example, it can instantiate and use `RequirementsGathererGraph` (or `RequirementsGathererStub`) based on `AgentsConfig`. The `requirements` node is created by `_create_requirements_node` factory.\n+    *   Node factory functions (`_create_orchestrate`, `_create_delegate_to`, `_create_requirements_node`) now explicitly receive the orchestrator's `agent_config` (i.e., `self._agent_config` from `OrchestratorGraph`) as an argument when called from `create_builder`.\n+    *   The `orchestrate` node (created by `_create_orchestrate` factory) uses the system prompt from this directly provided `agent_config` (including current time). LLM is initialized within `create_builder`.\n+    *   The `delegate_to` routing function (created by `_create_delegate_to` factory) is updated similarly.\n+    *   Integrates other agent graphs/stubs; for example, it can instantiate and use `RequirementsGathererGraph` (or `RequirementsGathererStub`) based on `AgentsConfig`. The `requirements` node (created by `_create_requirements_node` factory) invokes the sub-graph typically using `sub_graph.compiled_graph.ainvoke(...)`. The runtime `config` passed to the sub-graph does not need to carry the sub-graph's agent configuration, as the sub-graph's nodes will receive their configuration directly from their own `create_builder` scope.\n *   **Prompts (`src/orchestrator/prompts.py`):**\n     *   `ORCHESTRATOR_SYSTEM_PROMPT` (and the one constructed by `get_prompt()`) now includes a `{time}` placeholder, formatted with the current time during graph execution.\n     *   `src/orchestrator/memory/team.md`: Updated to specify that the `Delegate` tool usage MUST include the `content` field for the delegated task.\n@@ -165,7 +177,7 @@ Agents like Orchestrator, Requirement Gatherer, and now Coder subclass `AgentGra\n     *   The previous configuration functions (`coder_new_pr_config`, `coder_change_request_config`) have been replaced by `AgentGraph` subclasses: `CoderNewPRGraph` and `CoderChangeRequestGraph`.\n     *   These classes define configurations for different coding tasks (new PRs, modifying existing PRs).\n     *   `__init__(self, *, github_tools: List[Tool], agent_config: Optional[AgentConfiguration] = None, checkpointer: Optional[Checkpointer] = None, store: Optional[BaseStore] = None)`: Constructor for these graph classes. `agent_config` is of type `AgentConfiguration` from `common.configuration` (a new implied module/class). They are initialized with a list of GitHub tools.\n-    *   `create_builder(self) -> StateGraph`: Implements the abstract method from `AgentGraph` to define the specific graph structure, reusing the logic from the former `coder_*_config()` functions for graph building.\n+    *   `create_builder(self) -> StateGraph`: Implements the abstract method from `AgentGraph` to define the specific graph structure, reusing the logic from the former `coder_*_config()` functions for graph building. Node factory functions within `create_builder` would receive `self._agent_config` if they need agent-specific configuration.\n     *   The `coder_change_request_config()` logic (now part of `CoderChangeRequestGraph`) allows the agent to use the `get_pull_request_head_branch` tool.\n     *   The `CallModel` class and `_graph_builder` helper function are retained for internal graph construction within the `create_builder` methods.\n     *   `__all__` in `src/coder/graph.py` is updated to export the new class names: `CoderNewPRGraph` and `CoderChangeRequestGraph`.\n@@ -193,10 +205,10 @@ Agents like Orchestrator, Requirement Gatherer, and now Coder subclass `AgentGra\n     *   Defines its own `Configuration` dataclass in `src/requirement_gatherer/configuration.py`, subclassing `common.config.BaseConfiguration`.\n     *   `gatherer_system_prompt: str = prompts.SYSTEM_PROMPT`.\n     *   The dedicated `src/requirement_gatherer/configuration.py` file from a previous state was deleted, but this PR re-introduces it with the new structure.\n-    *   `RequirementsGathererGraph.__init__` now accepts `use_human_ai` parameter to control human feedback simulation.\n+    *   `RequirementsGathererGraph.__init__` now accepts `use_human_ai` parameter to control human feedback simulation (this parameter is part of its `Configuration` object).\n *   **Graph Logic (`src/requirement_gatherer/graph.py`):**\n-    *   The graph consists of a `call_model` node (created by `_create_call_model` factory) and a `ToolNode` (\"tools\"). LLM and tools are initialized within `create_builder`.\n-    *   `call_model`: Retrieves memories, formats them into the system prompt (which includes current time), and invokes an LLM bound with new tools.\n+    *   Node factory functions (`_create_call_model`, `_create_gather_requirements`) now explicitly receive the requirement gatherer's `agent_config` (i.e., `self._agent_config` from `RequirementsGathererGraph`) as an argument when called from `create_builder`.\n+    *   The `call_model` node (created by `_create_call_model` factory): Retrieves memories, formats them into the system prompt (which includes current time) using the directly provided `agent_config`, and invokes an LLM bound with new tools. LLM and tools are initialized within `create_builder`.\n     *   `ToolNode`: Executes tools like `human_feedback`, `memorize`, `summarize`.\n     *   Routing: `START` -> `call_model`. `call_model` routes to `tools` if tool calls are present, or back to `call_model` or `END` if a summary is generated. `tools` routes back to `call_model`. This logic is encapsulated in a route function created by `_create_gather_requirements` factory.\n     *   The previous `call_evaluator_model` and `Veredict`-based flow is REMOVED.\n@@ -205,7 +217,7 @@ Agents like Orchestrator, Requirement Gatherer, and now Coder subclass `AgentGra\n     *   The `veredict` field has been REMOVED.\n *   **Tools (`src/requirement_gatherer/tools.py`):**\n     *   Tools are now more modular and defined in `tools.py`:\n-        *   `human_feedback`: Tool created by `create_human_feedback_tool(use_human_ai=False)` factory. Can request feedback from a human (via `interrupt`) or simulate human responses using an AI if `use_human_ai` is true. Prints interaction to console.\n+        *   `human_feedback`: Tool created by `create_human_feedback_tool(agent_config: Configuration)` factory. The factory now takes the full `agent_config` object. The tool can request feedback from a human (via `interrupt`) or simulate human responses using an AI if `agent_config.use_human_ai` is true. The inner `human_feedback` tool function no longer extracts `agent_config` from the runtime `config` but uses the `agent_config` captured from its factory. Prints interaction to console.\n         *   `memorize(content: str, context: str, ...)`: Tool to upsert a memory. Uses `store.aput` with `(\"memories\", user_id)`. This tool is a refactoring of the previous `upsert_memory` function from this file.\n         *   `summarize(summary: str, ...)`: Tool to indicate the agent has produced a final summary. Updates state with the summary and prints to console.\n     *   The `upsert_memory` function in `src/requirement_gatherer/tools.py` has been refactored and renamed to the `memorize` tool.\n@@ -222,26 +234,33 @@ Agents like Orchestrator, Requirement Gatherer, and now Coder subclass `AgentGra\n *   (No changes mentioned in PR - assumed same as previous state, follows `agent_template` and uses `langmem`)\n \n #### 5.8. Task Manager (`src/task_manager/`)\n-*   (No changes mentioned in PR - assumed same as previous state, older agent structure)\n+*   **Architecture:** Likely now follows the `AgentGraph` pattern from `common.graph.AgentGraph`, as its `graph.py` has been updated consistent with this pattern.\n+*   **Graph Logic (`src/task_manager/graph.py` - UPDATED):**\n+    *   The `create_builder` method in `TaskManagerGraph` (assumed class name) now passes its `self._agent_config` to its node factory function `_create_call_model`.\n+    *   The `_create_call_model` factory function now explicitly receives the task manager's `agent_config` as an argument.\n+    *   The `call_model` node function (created by `_create_call_model`) no longer retrieves `agent_config` from the runtime `config` (e.g., `config[\"configurable\"][\"agent_config\"]`) but uses the configuration object passed during its creation.\n+    *   It defines nodes for `call_model` and `ToolNode`, and sets up routing between them.\n \n \n ## 6. Testing Framework (`tests/`)\n \n *   **`tests/integration_tests/test_orchestrator.py`:**\n-    *   Updated to use the new `OrchestratorGraph` for testing.\n+    *   Updated to use the new `OrchestratorGraph` for testing. Invocation pattern likely updated to `orchestrator.compiled_graph.ainvoke(..., orchestrator.create_runnable_config(...))`.\n *   **`tests/integration_tests/test_requirement_gatherer.py`:**\n-    *   Updated to use the new `RequirementsGathererGraph`.\n+    *   Updated to use the new `RequirementsGathererGraph`. Invocation pattern likely updated.\n     *   Still uses `create_async_graph_caller` and `LLMJudge` for evaluation against LangSmith datasets.\n *   **`tests/integration_tests/test_coder.py`:**\n-    *   Updated to use `CoderNewPRGraph` and `CoderChangeRequestGraph` for instantiating the Coder agent in tests.\n+    *   Updated to use `CoderNewPRGraph` and `CoderChangeRequestGraph` for instantiating the Coder agent in tests. Invocation pattern likely updated.\n     *   Added a new test `test_coder_changes_server_port_on_existing_pr`. This test verifies that the Coder agent, using `CoderChangeRequestGraph` (which wraps `coder_change_request_config`), correctly applies changes to the head branch of an existing pull request. It utilizes the `MockGithubApi` for setting up the test scenario.\n     *   These tests are now executed as part of the CI pipeline in a dedicated \"Coder Tests\" job (defined in `.github/workflows/checks.yml`), requiring the `GOOGLE_API_KEY` secret.\n *   **`tests/integration_tests/eval_coder.py`:**\n-    *   Updated to use `CoderNewPRGraph` for agent instantiation during evaluation.\n+    *   Updated to use `CoderNewPRGraph` for agent instantiation during evaluation. Invocation pattern likely updated.\n+*   **`src/demo/orchestrate.py` (Demo script, not test):**\n+    *   Updated to use `orchestrator.compiled_graph.ainvoke(...)` and `orchestrator.create_runnable_config(...)` for invocation.\n *   **`tests/unit_tests/test_configuration.py`:**\n     *   The previous test `test_configuration_from_none()` related to `orchestrator.configuration.Configuration` is removed as that file is deleted. A dummy test `test_foo()` might be present.\n *   **`src/orchestrator/test.py` (Local test script):**\n-    *   Updated to instantiate `OrchestratorGraph` using `AgentsConfig` and `BaseConfiguration`.\n+    *   Updated to instantiate `OrchestratorGraph` using `AgentsConfig` and `BaseConfiguration`. Invocation pattern likely updated.\n     *   Demonstrates setting `agents_config.requirements.use_stub = False` and `agents_config.requirements.use_human_ai = True`.\n \n \n@@ -285,7 +304,7 @@ ai-nexus/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n \u2502   \u2502   \u251c\u2500\u2500 agent.py\n \u2502   \u2502   \u251c\u2500\u2500 configuration.py\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # UPDATED: Explicit agent_config passing to node factories\n \u2502   \u2502   \u251c\u2500\u2500 prompts.py\n \u2502   \u2502   \u251c\u2500\u2500 state.py\n \u2502   \u2502   \u2514\u2500\u2500 tools.py\n@@ -310,13 +329,15 @@ ai-nexus/\n \u2502   \u2502   \u2502   \u2514\u2500\u2500 memory.py\n \u2502   \u2502   \u251c\u2500\u2500 config.py             # REVISED: Defines BaseConfiguration\n \u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW - Implied: Defines AgentConfiguration used by Coder\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: AgentGraph __init__ updated (flexible signature)\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: AgentGraph ainvoke/merge_config removed, create_runnable_config added\n \u2502   \u2502   \u2514\u2500\u2500 utils/\n+\u2502   \u251c\u2500\u2500 demo/                     # NEW (implied by PR diff)\n+\u2502   \u2502   \u2514\u2500\u2500 orchestrate.py        # NEW (implied by PR diff, shows new invocation pattern)\n \u2502   \u251c\u2500\u2500 grumpy/\n \u2502   \u251c\u2500\u2500 orchestrator/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n \u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW (re-added with new structure): Specific Configuration subclassing BaseConfiguration\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, AgentsConfig, factory functions for nodes\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, AgentsConfig, factory functions for nodes with explicit agent_config, updated sub-graph invocation\n \u2502   \u2502   \u251c\u2500\u2500 memory/\n \u2502   \u2502   \u2502   \u2514\u2500\u2500 team.md           # UPDATED: Delegate tool must include content\n \u2502   \u2502   \u251c\u2500\u2500 prompts.py            # UPDATED: System prompt includes {time}\n@@ -328,11 +349,12 @@ ai-nexus/\n \u2502   \u251c\u2500\u2500 requirement_gatherer/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n \u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW (re-added with new structure): Specific Configuration subclassing BaseConfiguration\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, factory functions for nodes, new tool usage\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, factory functions for nodes with explicit agent_config\n \u2502   \u2502   \u251c\u2500\u2500 prompts.py            # REVISED: System prompt updated for new tools/workflow, evaluator prompt removed\n \u2502   \u2502   \u251c\u2500\u2500 state.py              # REVISED: 'veredict' removed, 'summary' added, docstring\n-\u2502   \u2502   \u2514\u2500\u2500 tools.py              # REVISED: Defines create_human_feedback_tool, memorize (refactored from upsert_memory), summarize\n+\u2502   \u2502   \u2514\u2500\u2500 tools.py              # REVISED: Defines create_human_feedback_tool (takes agent_config), memorize, summarize\n \u2502   \u251c\u2500\u2500 task_manager/\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # UPDATED: Explicit agent_config passing to node factories\n \u2502   \u2514\u2500\u2500 tester/\n \u2514\u2500\u2500 tests/\n     \u251c\u2500\u2500 datasets/\n@@ -345,8 +367,8 @@ ai-nexus/\n     \u2502   \u251c\u2500\u2500 eval_coder.py           # UPDATED: Uses new Coder AgentGraph class\n     \u2502   \u251c\u2500\u2500 test_graph.py\n     \u2502   \u251c\u2500\u2500 test_grumpy_agent.py\n-    \u2502   \u251c\u2500\u2500 test_orchestrator.py    # UPDATED: Uses new OrchestratorGraph\n-    \u2502   \u251c\u2500\u2500 test_requirement_gatherer.py # UPDATED: Uses new RequirementsGathererGraph\n+    \u2502   \u251c\u2500\u2500 test_orchestrator.py    # UPDATED: Uses new OrchestratorGraph, likely new invocation\n+    \u2502   \u251c\u2500\u2500 test_requirement_gatherer.py # UPDATED: Uses new RequirementsGathererGraph, likely new invocation\n     \u2502   \u251c\u2500\u2500 test_task_manager.py\n     \u2502   \u2514\u2500\u2500 test_tester_agent.py\n     \u251c\u2500\u2500 testing/"
  }
}