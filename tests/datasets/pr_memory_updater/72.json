{
  "inputs": {
    "repository": "Moonsong-Labs/ai-nexus",
    "pr_num": "72"
  },
  "outputs": {
    "output": "diff --git a/project_memories/global.md b/project_memories/global.md\nindex 491c038..77eb90f 100644\n--- a/project_memories/global.md\n+++ b/project_memories/global.md\n@@ -10,13 +10,14 @@\n 1.  **Multi-Agent System:** The project involves a team of specialized AI agents (Orchestrator, Architect, Coder, Tester, Code Reviewer, Requirement Gatherer, Grumpy, Task Manager) working collaboratively.\n 2.  **Externalized Memory (Semantic Memory):** Agents rely on external storage for persistent knowledge, project state, and context. This addresses context loss in AI agents. The primary mechanism is `langmem`, providing semantic search capabilities over stored memories. `AgentGraph` can now automatically initialize and provide `SemanticMemory` and its tools to subclasses based on its configuration. The Tester agent, for instance, now includes logic to read from a `BaseStore` for contextual memories.\n 3.  **LangGraph Framework:** The primary framework used for building the AI agents, defining their state, and managing their execution flow.\n-4.  **Tool-Using Agents:** Agents are equipped with tools to perform actions, interact with systems (like GitHub), and manage their memory (using `langmem` tools provided via `AgentGraph`/`SemanticMemory`, or custom tools like `file_dump`, or agent-specific tools like the Requirement Gatherer's `memorize` and `human_feedback`, or Task Manager's file system tools). The Tester agent's previous custom `upsert_memory` tool has been removed.\n-5.  **System Prompts (REVISED):** Detailed system prompts define each agent's role, behavior, constraints, and interaction protocols. System prompts are now typically part of agent-specific `Configuration` classes (which subclass `AgentConfiguration` or, in the case of the Tester agent, `common.configuration.AgentConfiguration`). These configurations (and thus the prompts) are accessed by the agent's graph logic (e.g., in custom `call_model` implementations, which now often receive the agent's full `Configuration` object directly as a parameter, or access it via `RunnableConfig`). The Tester agent features enhanced prompt management with workflow stage-specific prompts and dynamic prompt formatting.\n+4.  **Tool-Using Agents:** Agents are equipped with tools to perform actions, interact with systems (like GitHub), and manage their memory (using `langmem` tools provided via `AgentGraph`/`SemanticMemory`, or custom tools like `file_dump`, or agent-specific tools like the Requirement Gatherer's `memorize` and `human_feedback`, or Task Manager's file system tools). The Tester agent's previous custom `upsert_memory` tool has been removed. The Code Reviewer agent now has specific GitHub tools like `get_pull_request_diff` and `create_pull_request_review` to interact with pull requests.\n+5.  **System Prompts (REVISED):** Detailed system prompts define each agent's role, behavior, constraints, and interaction protocols. System prompts are now typically part of agent-specific `Configuration` classes (which subclass `AgentConfiguration` or, in the case of the Tester agent, `common.configuration.AgentConfiguration`). These configurations (and thus the prompts) are accessed by the agent's graph logic (e.g., in custom `call_model` implementations, which now often receive the agent's full `Configuration` object directly as a parameter, or access it via `RunnableConfig`). The Tester agent features enhanced prompt management with workflow stage-specific prompts and dynamic prompt formatting. The Code Reviewer agent has a new `PR_REVIEW_PROMPT` for GitHub pull request reviews, configured via its `CodeReviewerInstanceConfig`.\n 6.  **Configuration Management (REVISED):** Agents have configurable parameters, including LLM models, system prompts, and memory settings. This is managed via:\n     *   A `MemoryConfiguration` dataclass (`common.components.memory.MemoryConfiguration`) for memory-specific settings like `use_memory`, `load_static_memories`, and `user_id`.\n     *   A common `AgentConfiguration` in `src/common/configuration.py` (NEW, replaces `BaseConfiguration`), which includes a `memory: MemoryConfiguration` field. It also includes `user_id`, `model`, and `provider` for LangGraph. Agent-specific system prompts are defined in subclasses.\n     *   Agent-specific `Configuration` dataclasses (e.g., in `src/orchestrator/configuration.py`, `src/requirement_gatherer/configuration.py`, `src/agent_template/configuration.py`, `src/task_manager/configuration.py`) that subclass `AgentConfiguration` and can include their own `system_prompt` or other specific settings.\n     *   The Tester agent's configuration (`src/tester/configuration.py`) now subclasses `common.configuration.AgentConfiguration` (aligning it with other refactored agents) and defines its `system_prompt`. Model and other common settings are inherited from `AgentConfiguration`.\n+    *   The Code Reviewer agent's specific `configuration.py` has been removed. Its configuration (like system prompts and tool selection) is now managed by `CodeReviewerInstanceConfig` dataclasses within its `graph.py` module, and its LLM is initialized directly in `graph.py`.\n 7.  **Asynchronous Operations:** The system heavily utilizes `async` and `await` for non-blocking operations within the agent graphs.\n 8.  **`langmem` Integration:** Provides semantic memory capabilities (storage, search) for agents. `SemanticMemory` (from `src/common/components/memory.py`) is configured using `MemoryConfiguration`. `AgentGraph` can instantiate `SemanticMemory` if `agent_config.memory.use_memory` is true, making memory tools available to the graph.\n 9.  **`AgentGraph` (REVISED):** A common base class (`src/common/graph.py`) for defining agent graphs.\n@@ -89,7 +90,7 @@ This file outlines the overarching standards and technological choices for the A\n     *   **CI Pipeline (`.github/workflows/checks.yml`):** Runs linting (Ruff, codespell), unit tests (`make test_unit`), and Coder integration tests (`make test_coder`). The Coder tests job requires `GOOGLE_API_KEY` as a secret.\n *   **Version Control:** Git.\n *   **LLM Models:**\n-    *   **`gemini-1.5-flash-latest` / `gemini-2.5-flash-preview-04-17` (or similar flash variants):** Preferred for simple tasks, quick evaluations. (`agent_template` default model inherited from `AgentConfiguration` if not overridden, `AgentConfiguration` defaults to `gemini-2.0-flash`).\n+    *   **`gemini-1.5-flash-latest` / `gemini-2.5-flash-preview-04-17` (or similar flash variants):** Preferred for simple tasks, quick evaluations. (`agent_template` default model inherited from `AgentConfiguration` if not overridden, `AgentConfiguration` defaults to `gemini-2.0-flash`). The Code Reviewer agent also defaults to a flash variant (`google_genai:gemini-2.0-flash`) initialized directly in its graph.\n     *   **`gemini-1.5-pro-latest` (or similar pro variants):** Preferred for complex tasks needing reasoning.\n \n \n@@ -97,7 +98,7 @@ This file outlines the overarching standards and technological choices for the A\n \n AI Nexus employs a few architectural patterns for its agents:\n \n-**4.1. `agent_template` based Architecture (e.g., Code Reviewer, Grumpy) - REVISED**\n+**4.1. `agent_template` based Architecture (e.g., Grumpy) - REVISED**\n \n This pattern is now embodied by `AgentTemplateGraph` which subclasses `AgentGraph`.\n \n@@ -167,7 +168,7 @@ A common base class for modular graph definitions.\n     *   `create_runnable_config(self, config: RunnableConfig | None = None) -> RunnableConfig` (NEW): Method to prepare `RunnableConfig` for graph invocation. It takes an optional `RunnableConfig`, merges `self._agent_config.langgraph_configurables` into its `configurable` field, and returns the modified `RunnableConfig`. This notably does *not* inject the full `agent_config` object into the `configurable` dictionary.\n     *   `compiled_graph`: Property to get or compile the graph. Invocation is now typically done via `self.compiled_graph.ainvoke(state, self.create_runnable_config(config))`.\n \n-Agents like Orchestrator, Requirement Gatherer, Coder, Task Manager, `AgentTemplateGraph`, and Tester subclass `AgentGraph`. The Tester agent has been updated to align its configuration and graph initialization more closely with this pattern (see 5.5).\n+Agents like Orchestrator, Requirement Gatherer, Coder, Task Manager, `AgentTemplateGraph`, and Tester subclass `AgentGraph`. The Code Reviewer agent currently uses a direct `StateGraph` implementation (see 5.4).\n \n \n ## 5. Specific Agent Details\n@@ -199,8 +200,35 @@ Agents like Orchestrator, Requirement Gatherer, Coder, Task Manager, `AgentTempl\n #### 5.3. Coder (`src/coder/`)\n *   **Architecture:** Uses the `AgentGraph` pattern. Its configuration (likely `src/coder/configuration.py`, though not explicitly detailed in PR#81 diffs) would need to subclass `common.configuration.AgentConfiguration` to be compatible with the revised `AgentGraph`.\n \n-#### 5.4. Code Reviewer (`src/code_reviewer/`)\n-*   (Likely follows `agent_template` pattern, so it will now use `AgentTemplateGraph` and its revised memory/config handling, including how `agent_config` is passed to its internal `_create_call_model` helper.)\n+#### 5.4. Code Reviewer (`src/code_reviewer/`) (REVISED)\n+*   **Architecture:** The Code Reviewer agent now uses a direct `StateGraph` implementation defined in `src/code_reviewer/graph.py`. It does not subclass `AgentGraph` or `AgentTemplateGraph`.\n+    *   It defines a `CodeReviewerInstanceConfig` dataclass to hold instance-specific settings like `name`, `system_prompt`, and a list of `github_tools` to use.\n+    *   Two configurations are provided: `non_github_code_reviewer_config()` and `github_code_reviewer_config()`.\n+    *   A `CodeReviewerNode` class encapsulates the agent's core logic, taking `github_tools` and `system_prompt` during initialization.\n+    *   The LLM (`google_genai:gemini-2.0-flash`) is initialized directly within `graph.py`.\n+*   **Configuration (`src/code_reviewer/configuration.py`):** DELETED. Configuration is now handled by `CodeReviewerInstanceConfig` in `graph.py`.\n+*   **Graph (`src/code_reviewer/graph.py` - REVISED):**\n+    *   Defines `CodeReviewerInstanceConfig` dataclass.\n+    *   Defines `CodeReviewerNode` class which calls the LLM.\n+    *   `graph_builder(github_toolset: list[Tool], system_prompt: str) -> StateGraph`:\n+        *   Initializes a `StateGraph(State)` (not using `config_schema`).\n+        *   Creates a `CodeReviewerNode` instance.\n+        *   Adds the `CodeReviewerNode` as the \"call_model\" node and a `ToolNode`.\n+        *   Sets up routing: `START` -> `call_model` -> (conditional `tools_condition`) `tools` -> `call_model` or `END`.\n+*   **`lg_server.py` (`src/code_reviewer/lg_server.py` - REVISED):**\n+    *   Exposes two compiled graph instances:\n+        *   `graph_with_github_tools`: Uses `github_code_reviewer_config()` which includes GitHub tools and the `PR_REVIEW_PROMPT`.\n+        *   `graph_no_github_tools`: Uses `non_github_code_reviewer_config()` which uses the standard `SYSTEM_PROMPT` and an empty list of GitHub tools.\n+*   **Prompts (`src/code_reviewer/prompts.py` - REVISED):**\n+    *   `SYSTEM_PROMPT`: Standard system prompt for general code review.\n+    *   `PR_REVIEW_PROMPT` (NEW): A new system prompt specifically for reviewing GitHub pull requests, instructing the agent to use GitHub tools to fetch PR details, read files, consider the diff, and provide feedback using GitHub Markdown.\n+*   **Tools:**\n+    *   The agent can be configured with a list of GitHub tools.\n+    *   New tools available via `common.components.github_tools`:\n+        *   `get_pull_request_diff`: Fetches the diff of a PR.\n+        *   `create_pull_request_review`: Creates a PR review on GitHub, including an overall comment, an event type (APPROVE, REQUEST_CHANGES, COMMENT), and line-specific comments on the diff. This tool uses `PRReviewComment` and `CreatePRReview` Pydantic models for its arguments.\n+    *   The `CodeReviewerNode`'s call to the LLM now returns the raw LLM message, and the structured output `DiffFeedback` has been removed from this direct path.\n+*   **State (`src/code_reviewer/state.py`):** The `DiffFeedback` field in the state is still present, but the main LLM call in `CodeReviewerNode` now directly returns messages, not a `DiffFeedback` object.\n \n #### 5.5. Tester (`src/tester/`) (REWORKED)\n *   **Overall:** The Tester agent has been significantly reworked to streamline its workflow, improve prompt management, and refine configuration and state.\n@@ -357,7 +385,7 @@ ai-nexus/\n \u251c\u2500\u2500 README.md                     # UPDATED: Examples for semantic memory, new config, local demo\n \u251c\u2500\u2500 agent_memories/\n \u2502   \u2514\u2500\u2500 grumpy/\n-\u251c\u2500\u2500 langgraph.json\n+\u251c\u2500\u2500 langgraph.json                # UPDATED: Code reviewer entries\n \u251c\u2500\u2500 project_memories/\n \u2502   \u251c\u2500\u2500 PRD.md\n \u2502   \u2514\u2500\u2500 global.md\n@@ -379,7 +407,13 @@ ai-nexus/\n \u2502   \u2502   \u251c\u2500\u2500 output.py\n \u2502   \u2502   \u2514\u2500\u2500 prompts/v0.1.md\n \u2502   \u251c\u2500\u2500 code_reviewer/\n-\u2502   \u2502   \u2514\u2500\u2500 system_prompt.md\n+\u2502   \u2502   \u251c\u2500\u2500 __init__.py           # UPDATED: Exports graph_no_github_tools, graph_with_github_tools\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # DELETED\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # UPDATED: Direct StateGraph, CodeReviewerInstanceConfig, CodeReviewerNode, GitHub/Non-GitHub configs\n+\u2502   \u2502   \u251c\u2500\u2500 lg_server.py          # UPDATED: Exposes graph_with_github_tools and graph_no_github_tools\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # UPDATED: Added PR_REVIEW_PROMPT\n+\u2502   \u2502   \u251c\u2500\u2500 state.py\n+\u2502   \u2502   \u2514\u2500\u2500 system_prompt.md      # (File still exists, content used in prompts.py)\n \u2502   \u251c\u2500\u2500 coder/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n \u2502   \u2502   \u251c\u2500\u2500 graph.py\n@@ -391,8 +425,8 @@ ai-nexus/\n \u2502   \u2502   \u2514\u2500\u2500 README.md\n \u2502   \u251c\u2500\u2500 common/\n \u2502   \u2502   \u251c\u2500\u2500 components/\n-\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_mocks.py\n-\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_tools.py\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_mocks.py   # UPDATED: Added mock methods for get_pull_request_diff, create_pull_request_review\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_tools.py   # UPDATED: Added GetPullRequestDiff, CreatePullRequestReviewComment tools and schemas (PRReviewComment, CreatePRReview)\n \u2502   \u2502   \u2502   \u2514\u2500\u2500 memory.py         # UPDATED: Defines MemoryConfiguration, SemanticMemory uses it, ConfigurationProtocol removed\n \u2502   \u2502   \u251c\u2500\u2500 config.py             # DELETED (Replaced by common/configuration.py) - Note: Tester agent's configuration.py refers to this path.\n \u2502   \u2502   \u251c\u2500\u2500 configuration.py      # ADDED: Defines AgentConfiguration (base for all agent configs)"
  }
}