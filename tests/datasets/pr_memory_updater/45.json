{
  "inputs": {
    "repository": "Moonsong-Labs/ai-nexus",
    "pr_num": "45"
  },
  "outputs": {
    "output": "diff --git a/project_memories/global.md b/project_memories/global.md\nindex 53f5313..8435fea 100644\n--- a/project_memories/global.md\n+++ b/project_memories/global.md\n@@ -10,12 +10,12 @@\n 1.  **Multi-Agent System:** The project involves a team of specialized AI agents (Orchestrator, Architect, Coder, Tester, Code Reviewer, Requirement Gatherer, Grumpy, Task Manager) working collaboratively.\n 2.  **Externalized Memory (Semantic Memory):** Agents rely on external storage for persistent knowledge, project state, and context. This addresses context loss in AI agents. The primary mechanism is now `langmem`, providing semantic search capabilities over stored memories, replacing the previous conceptual Markdown-based \"Memory Bank\" and direct `upsert_memory` tool usage for agents based on the template.\n 3.  **LangGraph Framework:** The primary framework used for building the AI agents, defining their state, and managing their execution flow.\n-4.  **Tool-Using Agents:** Agents are equipped with tools to perform actions, interact with systems (like GitHub), and manage their memory (using `langmem` tools or custom tools like `file_dump`).\n+4.  **Tool-Using Agents:** Agents are equipped with tools to perform actions, interact with systems (like GitHub), and manage their memory (using `langmem` tools or custom tools like `file_dump`). Some agents (like Coder, Code Reviewer) can use specialized tools (e.g., GitHub tools).\n 5.  **System Prompts:** Detailed system prompts define each agent's role, behavior, constraints, and interaction protocols.\n-6.  **Configuration Management:** Agents have configurable parameters, including LLM models, system prompts, and memory settings (e.g., `use_static_mem`), managed via `Configuration` dataclasses.\n+6.  **Configuration Management:** Agents have configurable parameters, including LLM models, system prompts, and memory settings (e.g., `use_static_mem`), managed via `Configuration` dataclasses or specialized instance configs (e.g., Coder, Code Reviewer).\n 7.  **Asynchronous Operations:** The system heavily utilizes `async` and `await` for non-blocking operations within the agent graphs.\n-8.  **`langmem` Integration:** Provides semantic memory capabilities (storage, search) for agents, typically managed via the `Agent` class and `SemanticMemory` component.\n-\n+8.  **`langmem` Integration:** Provides semantic memory capabilities (storage, search) for agents, typically managed via the `Agent` class and `SemanticMemory` component for agents following the `agent_template`.\n+9.  **Structured Output:** Some agents (e.g., Tester, Code Reviewer) are designed to produce structured output using Pydantic models.\n \n ## 2. The Memory Bank System (Shift from Conceptual to `langmem`)\n \n@@ -66,11 +66,11 @@ This file outlines the overarching standards and technological choices for the A\n \n ## 4. General Agent Architecture (based on `src/agent_template/` and common patterns)\n \n-Most agents in AI Nexus follow a common structural and operational pattern, largely derived from `src/agent_template/`. *Note: Some agents, like the Tester, Coder, or Task Manager, may deviate significantly from this template's graph logic or tool usage.*\n+Most agents in AI Nexus follow a common structural and operational pattern, largely derived from `src/agent_template/`. *Note: Some agents, like the Tester, Coder, Code Reviewer, or Task Manager, may deviate significantly from this template's graph logic, tool usage, or state management.*\n \n-*   **Typical Agent Directory Structure:**\n+*   **Typical Agent Directory Structure (following `agent_template`):**\n     *   `__init__.py`: Exposes the agent's graph.\n-    *   `agent.py`: **NEW:** Contains the `Agent` class handling LLM interaction and memory integration.\n+    *   `agent.py`: Contains the `Agent` class handling LLM interaction and memory integration.\n     *   `configuration.py`: Defines agent-specific configurable parameters.\n     *   `graph.py`: Contains the LangGraph `StateGraph` definition, typically using the `Agent` class.\n     *   `prompts.py`: Stores default system prompts and potentially other prompts.\n@@ -95,7 +95,7 @@ Most agents in AI Nexus follow a common structural and operational pattern, larg\n             default=\"google_genai:gemini-2.5-flash-preview-04-17\" # Updated default model\n         )\n         system_prompt: str = prompts.SYSTEM_PROMPT\n-        use_static_mem: bool = True # NEW: Flag to control static memory loading\n+        use_static_mem: bool = True # Flag to control static memory loading\n \n         # Other agent-specific configurations might be added here\n \n@@ -118,7 +118,7 @@ Most agents in AI Nexus follow a common structural and operational pattern, larg\n     class State:\n         \"\"\"Main graph state.\"\"\"\n         messages: Annotated[List[AnyMessage], add_messages] = field(default_factory=list)\n-        user_id: str = \"default\" # NEW: User ID for memory management\n+        user_id: str = \"default\" # User ID for memory management\n     ```\n \n *   **`agent.py` (NEW - `src/agent_template/agent.py`):**\n@@ -216,7 +216,7 @@ Most agents in AI Nexus follow a common structural and operational pattern, larg\n     *   `NEW_PR_SYSTEM_PROMPT`: System prompt for the `coder_new_pr` flow. Instructs the agent on creating a new branch (`code-agent-*`) and submitting a PR.\n     *   `CHANGE_REQUEST_SYSTEM_PROMPT`: System prompt for the `coder_change_request` flow. Instructs the agent on applying changes to an existing PR branch.\n     *   The previous generic `SYSTEM_PROMPT` has been replaced by these more specific prompts.\n-*   **`tools.py` (`src/coder/tools.py`):**\n+*   **`tools.py` (`src/common/components/github_tools.py` formerly `src/coder/tools.py`):**\n     *   `GITHUB_TOOLS`: A list of tool names (e.g., `\"create_branch\"`, `\"get_contents\"`, `\"get_pull_request\"`) used to filter tools obtained from `GitHubToolkit` (for real API) or `mock_github_tools`. **Updated** to include tools for PR inspection like `\"get_pull_request\"` and `\"list_pull_requests_files\"`.\n     *   `get_github_tools(github_source: Union[GitHubAPIWrapper, MockGithubApi]) -> list[Tool]`:\n         *   If `github_source` is `MockGithubApi`, calls `mock_github_tools`.\n@@ -228,10 +228,11 @@ Most agents in AI Nexus follow a common structural and operational pattern, larg\n         *   Tools created include: `create_file`, `read_file`, `update_file`, `delete_file`, `create_pull_request`, `create_a_new_branch`, `set_active_branch`.\n         *   The tool for getting directory/file contents is named **`get_files_from_a_directory`** (wraps `mock_api.get_files_from_directory`).\n         *   **NEW Mocked Tools:** `get_pull_request`, `list_pull_requests_files` (wrapping corresponding `MockGithubApi` methods).\n-*   **`mocks.py` (`src/coder/mocks.py`):**\n+*   **`mocks.py` (`src/common/components/github_mocks.py` formerly `src/coder/mocks.py`):**\n     *   `MockGithubApi`:\n         *   Methods: `set_active_branch`, `create_branch`, `_get_files_recursive`, `get_files_from_directory`, `create_pull_request`, `create_file`, `update_file`, `delete_file`, `read_file`.\n         *   **NEW Methods:** `get_pull_request`, `list_pull_requests_files`.\n+    *   `maybe_mock_github() -> Union[GitHubAPIWrapper, MockGithubApi]`: (NEW in this location, moved and centralized) Function to select GitHub source based on environment variables.\n *   **`graph.py` (`src/coder/graph.py`):**\n     *   Defines `CoderInstanceConfig(Dataclass)`:\n         *   Attributes: `name: str`, `system_prompt: str`, `github_tools: List[str]` (list of specific tool names for this instance).\n@@ -253,24 +254,42 @@ Most agents in AI Nexus follow a common structural and operational pattern, larg\n     *   Exposes two compiled graph instances for LangGraph Server:\n         *   `graph_new_pr = coder_new_pr_config().graph_builder(github_tools).compile()`\n         *   `graph_change_request = coder_change_request_config().graph_builder(github_tools).compile()`\n-    *   `get_github_source() -> Union[GitHubAPIWrapper, MockGithubApi]`:\n-        *   Dynamically selects the GitHub tool source.\n-        *   Uses `GitHubAPIWrapper` if `GITHUB_APP_ID`, `GITHUB_APP_PRIVATE_KEY`, and `GITHUB_REPOSITORY` environment variables are set (logs \"Using live GitHub API toolkit\").\n-        *   Otherwise, falls back to `MockGithubApi` (logs \"Using mock GitHub API toolkit\").\n-    *   `github_tools` are initialized using `get_github_tools(get_github_source())`.\n+    *   Uses `maybe_mock_github` from `src/common/components/github_mocks.py` to get `github_source`.\n+    *   `github_tools` are initialized using `get_github_tools(github_source)` from `src/common/components/github_tools.py`.\n *   **`state.py` (`src/coder/state.py`):**\n     *   `class State(TypedDict): messages: Annotated[list[AnyMessage], add_messages]` (Remains the same).\n *   **`README.md` (`src/coder/README.md`):** (No changes mentioned in PR, assumed same).\n \n #### 5.4. Code Reviewer (`src/code_reviewer/`)\n-*   **Role:** Expert code reviewer, makes suggestions to maintain a high-quality codebase. Does NOT modify code/assets directly.\n-*   **`system_prompt.md` (`src/code_reviewer/system_prompt.md`):** (Remains the same).\n-*   **Structure:** Follows the `agent_template` pattern.\n-    *   `configuration.py`: Standard, uses `prompts.SYSTEM_PROMPT`. Default model likely updated. Includes `use_static_mem`.\n-    *   `graph.py`: Now uses the `Agent` class, `ToolNode`, and `tools_condition` flow. Relies on `langmem` tools and `file_dump` provided by the `Agent` class, replacing `upsert_memory`.\n-    *   `state.py`: Standard `State` with `messages` and `user_id`.\n-    *   `tools.py`: Defines utility tools like `file_dump`. `upsert_memory` is removed. Memory tools come from `Agent`.\n-    *   `agent.py`: Contains the `Agent` class instance for this agent.\n+*   **Role:** Expert code reviewer, makes suggestions to maintain a high-quality codebase. Does NOT modify code/assets directly. Uses structured output for feedback.\n+*   **`system_prompt.md` (`src/code_reviewer/system_prompt.md`):** (No changes mentioned in PR, assumed same).\n+*   **Structure:** Deviates from the `agent_template`. Uses a custom `CallModel` class and instance configuration for graph building.\n+    *   `__init__.py`: Exports `graph_non_github`.\n+    *   `configuration.py`: Standard configuration dataclass. Default model likely updated. Includes `use_static_mem`.\n+    *   `graph.py`:\n+        *   Defines Pydantic models for structured output:\n+            *   `DiffHunkFeedback(BaseModel)`: `change_required: bool`, `file: str`, `offset: int`, `comment: str`.\n+            *   `DiffFeedback(BaseModel)`: `requests_changes: bool`, `overall_comment: str`, `feedback: List[DiffHunkFeedback]`.\n+        *   Defines `CodeReviewerInstanceConfig(Dataclass)`:\n+            *   Attributes: `name: str`, `system_prompt: str`, `github_tools: List[str]`.\n+            *   Methods: `graph_builder(self, github_toolset: list[Tool])`, `filter_tools(self, tools: List[Tool])`.\n+        *   Factory function `non_github_code_reviewer_config()`: Returns `CodeReviewerInstanceConfig` for non-GitHub workflow (empty `github_tools`).\n+        *   `CallModel` class:\n+            *   `__init__(self, github_tools: list[Tool], system_prompt: str)`.\n+            *   `__call__(self, state: State) -> dict`: Constructs messages, binds `github_tools` (if any), invokes LLM with `with_structured_output(DiffFeedback)`. Returns `{\"messages\": [{\"role\": \"assistant\", \"content\": diff_feedback.model_dump_json()}], \"diff_feedback\": diff_feedback}`.\n+        *   `graph_builder(github_toolset: list[Tool], system_prompt: str) -> StateGraph`:\n+            *   Creates `StateGraph(State)`.\n+            *   Adds `call_model` node using `CallModel` instance.\n+            *   Adds `ToolNode` for `github_toolset`.\n+            *   Flow: `__start__` -> `call_model` -> (conditional `tools_condition`: `tools` if tool call, `END` otherwise) -> `call_model` (if from `tools`).\n+    *   `lg_server.py` (NEW):\n+        *   Initializes `github_source` using `maybe_mock_github()` from `common.components.github_mocks`.\n+        *   Initializes `github_tools` using `get_github_tools(github_source)` from `common.components.github_tools`.\n+        *   Exposes `graph_non_github = non_github_code_reviewer_config().graph_builder(github_tools).compile()`.\n+    *   `state.py`: Defines `State` for the agent's graph. Expected to include `messages`, `user_id`, and `diff_feedback: Optional[DiffFeedback] = None` (or similar) to store the structured output from `CallModel`.\n+    *   `tools.py`: DELETED (previously contained `upsert_memory`).\n+    *   `utils.py`: DELETED (previously contained `split_model_and_provider`).\n+    *   `agent.py`: This agent does not use the `Agent` class from `agent_template`. LLM interaction is handled by its own `CallModel` class. Memory management (if any beyond prompt context) is not via `langmem` tools in the `graph_non_github` version.\n \n #### 5.5. Tester (`src/tester/`)\n *   **Role:** Generates tests based on requirements, asks clarifying questions. Uses structured output. (Note: The Tester agent's graph and tools are distinct from the `agent_template` and do not directly use `langmem` for memory in the same way).\n@@ -388,8 +407,8 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n         *   Uses `LLMJudge` from `tests.testing.evaluators` to create a `correctness_evaluator` with a specific prompt for judging Grumpy's output.\n         *   The `create_graph_caller` utility is used to wrap the Grumpy agent's graph for evaluation.\n     *   **`test_coder.py`:**\n-        *   Contains integration tests for the Coder agent's GitHub interactions using `MockGithubApi`.\n-        *   Tests now instantiate the graph using `coder_new_pr_config().graph_builder(github_tools).compile()`.\n+        *   Contains integration tests for the Coder agent's GitHub interactions using `MockGithubApi` (from `common.components.github_mocks`).\n+        *   Tests now instantiate the graph using `coder_new_pr_config().graph_builder(github_tools).compile()`. `github_tools` are sourced via `get_github_tools` (from `common.components.github_tools`).\n         *   The custom evaluation framework using `openevals` has been moved to `tests/integration_tests/eval_coder.py`.\n     *   **`eval_coder.py` (`tests/integration_tests/eval_coder.py`) (NEW):**\n         *   Defines a custom evaluation framework for the Coder agent (specifically the `coder_new_pr` flow) using `openevals`.\n@@ -399,8 +418,8 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n         *   `evaluate_code_scorer`: Async function that formats inputs and invokes the `judge_llm`.\n         *   `evaluate_code`: Async function that uses `openevals.utils._arun_evaluator` with `evaluate_code_scorer` to perform evaluation.\n         *   `invoke_agent(inputs: CodeEvaluatorInputs) -> dict`:\n-            *   Sets up `MockGithubApi` with `inputs[\"starting_code\"]`.\n-            *   Compiles the `coder_new_pr` graph: `coder_new_pr_config().graph_builder(github_tools).compile()`.\n+            *   Sets up `MockGithubApi` (from `common.components.github_mocks`) with `inputs[\"starting_code\"]`.\n+            *   Compiles the `coder_new_pr` graph: `coder_new_pr_config().graph_builder(github_tools).compile()`. `github_tools` are sourced via `get_github_tools` (from `common.components.github_tools`).\n             *   Invokes the graph with `inputs[\"user_input\"]`.\n         *   `test_coder_run_eval_dataset()`: Pytest async test that runs `langsmith.aevaluate` using `invoke_agent` against the `CODER_DATASET_NAME`, with `evaluate_code` as the evaluator.\n     *   **`test_task_manager.py` (NEW):**\n@@ -409,6 +428,10 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n         *   Defines a custom `create_task_manager_graph_caller` function to adapt dataset inputs and invoke the graph.\n         *   Uses `LLMJudge().create_correctness_evaluator(plaintext=True)` for evaluation.\n         *   Runs `client.aevaluate()` with `num_repetitions=4`.\n+    *   **`test_architect_agent.py`:** Minor fix for indentation in evaluator parameters.\n+    *   **`test_code_reviewer_agent.py`:**\n+        *   Updated to use `non_github_code_reviewer_config().graph_builder([]).compile(checkpointer=memory_saver)` for graph compilation.\n+        *   Corrected reference output key in `correctness_evaluator` from `reference_outputs[\"message\"][0][\"content\"]` to `reference_outputs[\"messages\"][0][\"content\"]`.\n \n *   **`tests/testing/__init__.py`:**\n     *   `get_logger()`: Utility to create a Python logger with a default format.\n@@ -434,7 +457,7 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n         *   Compares `outputs['output']` (actual agent response) with `reference_outputs['message']['content']` (expected response from dataset).\n \n *   **Evaluation Approaches:**\n-    *   **LangSmith Datasets + LLM Judge:** Used for Requirement Gatherer, Tester (simple case), Grumpy, Task Manager. Relies on `client.aevaluate()` and evaluators defined in `tests/testing/evaluators.py`.\n+    *   **LangSmith Datasets + LLM Judge:** Used for Requirement Gatherer, Tester (simple case), Grumpy, Task Manager, Code Reviewer. Relies on `client.aevaluate()` and evaluators defined in `tests/testing/evaluators.py`.\n     *   **Custom `openevals` Framework:** Implemented in `tests/integration_tests/eval_coder.py` for the Coder agent's `coder_new_pr` flow. Involves custom prompts, input/output structures, and direct use of `openevals` utilities with an LLM judge defined within the test file. The test itself (`test_coder_run_eval_dataset`) uses `langsmith.aevaluate` to run these custom evaluations against a dataset.\n *   **`tests/testing/formatter.py` (Implied by PR usage):**\n     *   Provides utility functions for formatting and printing evaluation results.\n@@ -468,12 +491,12 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n     *   `make test-requirement-gatherer`: Runs Requirement Gatherer integration tests.\n     *   `make test-tester`: Runs Tester agent integration tests.\n     *   `make test-architect`: Runs Architect agent integration tests.\n-    *   `make test-task-manager`: Runs Task Manager integration tests (`uv run -- pytest -rs $(INTEGRATION_TEST_FILE)test_task_manager.py`). (NEW)\n+    *   `make test-task-manager`: Runs Task Manager integration tests (`uv run -- pytest -rs $(INTEGRATION_TEST_FILE)test_task_manager.py`).\n     *   `make set-requirement-dataset`: Creates the Requirement Gatherer LangSmith dataset.\n-    *   `make set-task-manager-dataset`: Creates the Task Manager LangSmith dataset (`uv run --env-file .env -- python tests/datasets/task_manager_dataset.py`). (NEW)\n+    *   `make set-task-manager-dataset`: Creates the Task Manager LangSmith dataset (`uv run --env-file .env -- python tests/datasets/task_manager_dataset.py`).\n *   **Configuration:** `.env` file (copied from `.env.example`) for environment variables.\n     *   Required for Google AI services: `GOOGLE_API_KEY` (this is the preferred variable). Alternatively, `GEMINI_API_KEY` can be set; scripts will use `GOOGLE_API_KEY` if present, otherwise they will use `GEMINI_API_KEY`.\n-    *   Optional for Coder agent: `GITHUB_APP_ID`, `GITHUB_APP_PRIVATE_KEY`, `GITHUB_REPOSITORY`.\n+    *   Optional for Coder agent (and other GitHub-enabled agents): `GITHUB_APP_ID`, `GITHUB_APP_PRIVATE_KEY`, `GITHUB_REPOSITORY`.\n     *   Optional for LangSmith: `LANGCHAIN_API_KEY`, `LANGCHAIN_TRACING_V2`, `LANGCHAIN_ENDPOINT`, `LANGCHAIN_PROJECT`.\n *   **CI/CD (GitHub Actions):**\n     *   Workflow defined in `.github/workflows/checks.yml`.\n@@ -485,7 +508,7 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n     *   Integration tests (`make test_integration`) are commented out in the `checks.yml` file, indicating they might be run separately or are pending full CI integration.\n *   **LangGraph Studio:**\n     *   The project can be opened in LangGraph Studio for visualization, interaction, and debugging.\n-    *   `langgraph.json` can be used to set the default graph to open in Studio. It now includes entries for the `architect` graph, and **has been updated to reflect the Coder agent's split into `coder_new_pr` and `coder_change_request` graphs.**\n+    *   `langgraph.json` can be used to set the default graph to open in Studio. It now includes entries for the `architect` graph, Coder agent's split (`coder_new_pr`, `coder_change_request`), and **has been updated for `code_reviewer` to point to `src/code_reviewer/lg_server.py:graph_non_github`**.\n     *   The README provides a badge/link to open the project directly in LangGraph Studio using a GitHub URL.\n *   **Adding New Agents:**\n     1.  Copy the `src/agent_template/` directory and rename it.\n@@ -505,87 +528,94 @@ ai-nexus/\n \u251c\u2500\u2500 .github/\n \u2502   \u2514\u2500\u2500 workflows/\n \u2502       \u2514\u2500\u2500 checks.yml\n-\u251c\u2500\u2500 Makefile                      # Task runner (Added test-memory-graph, test-task-manager, set-task-manager-dataset targets)\n+\u251c\u2500\u2500 Makefile                      # Task runner\n \u251c\u2500\u2500 README.md                     # Includes NEW section on using semantic memory\n-\u251c\u2500\u2500 agent_memories/               # Agent-specific static memories (e.g., for Grumpy)\n+\u251c\u2500\u2500 agent_memories/               # Agent-specific static memories\n \u2502   \u2514\u2500\u2500 grumpy/\n-\u2502       \u251c\u2500\u2500 review-coding.md      # Context for Grumpy's code review\n-\u2502       \u251c\u2500\u2500 review-designing.md   # Context for Grumpy's design review\n-\u2502       \u2514\u2500\u2500 role.md               # Core operational rules and Mermaid diagram for Grumpy\n-\u251c\u2500\u2500 langgraph.json                # LangGraph Studio configuration (UPDATED: Coder agent split into coder_new_pr, coder_change_request)\n+\u2502       \u251c\u2500\u2500 review-coding.md\n+\u2502       \u251c\u2500\u2500 review-designing.md\n+\u2502       \u2514\u2500\u2500 role.md\n+\u251c\u2500\u2500 langgraph.json                # LangGraph Studio configuration (UPDATED: Coder agent split, Code Reviewer entry updated)\n \u251c\u2500\u2500 project_memories/             # Project-wide standards, global context\n-\u2502   \u251c\u2500\u2500 PRD.md                    # Product Requirements Document: standards, tech stack, goals\n-\u2502   \u2514\u2500\u2500 global.md                 # High-level project mission, \"Cursor\" Memory Bank concept\n-\u251c\u2500\u2500 pyproject.toml                # Project metadata, dependencies (for uv/Poetry), package definitions\n+\u2502   \u251c\u2500\u2500 PRD.md\n+\u2502   \u2514\u2500\u2500 global.md\n+\u251c\u2500\u2500 pyproject.toml                # Project metadata, dependencies, package definitions\n \u251c\u2500\u2500 src/                          # Source code for all agents and common utilities\n \u2502   \u251c\u2500\u2500 agent_template/           # Base template for creating new agents\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n-\u2502   \u2502   \u251c\u2500\u2500 agent.py              # NEW: Agent class handling LLM/memory interaction\n-\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # UPDATED: Added use_static_mem, new default model\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses Agent class, ToolNode, tools_condition\n-\u2502   \u2502   \u251c\u2500\u2500 memory.py             # DELETED\n-\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # UPDATED: Instructs agent to mention memory retrieval\n-\u2502   \u2502   \u251c\u2500\u2500 state.py              # UPDATED: Added user_id field\n-\u2502   \u2502   \u251c\u2500\u2500 tools.py              # REVISED: Defines file_dump tool, upsert_memory removed\n-\u2502   \u2502   \u2514\u2500\u2500 utils.py              # (May be moved/refactored to common)\n-\u2502   \u251c\u2500\u2500 architect/                # Architect agent: manages project design and documentation\n-\u2502   \u2502   \u251c\u2500\u2500 output.py             # Pydantic models for Architect's structured output\n-\u2502   \u2502   \u2514\u2500\u2500 prompts/v0.1.md       # Detailed system prompt for Architect (v0.1)\n-\u2502   \u251c\u2500\u2500 code_reviewer/            # Code Reviewer agent: reviews code for quality\n+\u2502   \u2502   \u251c\u2500\u2500 agent.py\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py\n+\u2502   \u2502   \u251c\u2500\u2500 state.py\n+\u2502   \u2502   \u2514\u2500\u2500 tools.py\n+\u2502   \u251c\u2500\u2500 architect/                # Architect agent\n+\u2502   \u2502   \u251c\u2500\u2500 output.py\n+\u2502   \u2502   \u2514\u2500\u2500 prompts/v0.1.md\n+\u2502   \u251c\u2500\u2500 code_reviewer/            # Code Reviewer agent: reviews code for quality, uses structured output\n+\u2502   \u2502   \u251c\u2500\u2500 __init__.py           # UPDATED: Exports graph_non_github\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # Standard configuration\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Defines structured output models (DiffFeedback, DiffHunkFeedback), CodeReviewerInstanceConfig, CallModel class, new graph_builder logic. Does not use agent_template.Agent.\n+\u2502   \u2502   \u251c\u2500\u2500 lg_server.py          # NEW: Exposes compiled graph_non_github, uses common GitHub components.\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # (Assumed to exist for SYSTEM_PROMPT)\n+\u2502   \u2502   \u251c\u2500\u2500 state.py              # Defines agent state (expected to include messages, user_id, diff_feedback)\n \u2502   \u2502   \u2514\u2500\u2500 system_prompt.md      # System prompt for Code Reviewer\n-\u2502   \u251c\u2500\u2500 coder/                    # Coder agent: writes code, interacts with GitHub (Now split into new_pr and change_request flows)\n-\u2502   \u2502   \u251c\u2500\u2500 __init__.py           # Exports graph_new_pr, graph_change_request\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # Defines CoderInstanceConfig, _graph_builder, and config factories for new_pr and change_request flows\n-\u2502   \u2502   \u251c\u2500\u2500 lg_server.py          # NEW: Exposes compiled Coder graphs (graph_new_pr, graph_change_request) for LangGraph Server, handles dynamic GitHub source\n-\u2502   \u2502   \u251c\u2500\u2500 mocks.py              # Mock GitHub API for testing (UPDATED: new mock methods for PR details)\n-\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # UPDATED: NEW_PR_SYSTEM_PROMPT, CHANGE_REQUEST_SYSTEM_PROMPT\n-\u2502   \u2502   \u251c\u2500\u2500 state.py              # Defines Coder agent state\n-\u2502   \u2502   \u251c\u2500\u2500 tools.py              # Defines GitHub tools (UPDATED: new tools for PR details, GITHUB_TOOLS list, get_github_tools function)\n-\u2502   \u2502   \u2514\u2500\u2500 README.md             # Setup instructions for GitHub App\n+\u2502   \u251c\u2500\u2500 coder/                    # Coder agent: writes code, interacts with GitHub\n+\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py\n+\u2502   \u2502   \u251c\u2500\u2500 lg_server.py          # UPDATED: Uses common GitHub components from src/common/components/\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py\n+\u2502   \u2502   \u251c\u2500\u2500 state.py\n+\u2502   \u2502   \u2514\u2500\u2500 README.md\n \u2502   \u251c\u2500\u2500 common/                   # Common utilities shared across agents\n+\u2502   \u2502   \u251c\u2500\u2500 components/           # NEW (or formalized): Shared components\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_mocks.py   # NEW: Mock Github API (moved from coder/mocks.py), includes maybe_mock_github()\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_tools.py   # NEW: GitHub tools (moved from coder/tools.py)\n+\u2502   \u2502   \u2502   \u2514\u2500\u2500 memory.py         # Semantic memory component\n \u2502   \u2502   \u2514\u2500\u2500 utils/                # Shared utility functions\n-\u2502   \u251c\u2500\u2500 grumpy/                   # Grumpy agent: reviews design/coding tasks based on strict rules\n-\u2502   \u251c\u2500\u2500 orchestrator/             # Orchestrator agent: delegates tasks to other agents\n-\u2502   \u2502   \u251c\u2500\u2500 memory/               # Markdown files defining Orchestrator's rules and team\n-\u2502   \u2502   \u2514\u2500\u2500 stubs/                # Stub implementations for delegated agent calls (for testing/dev)\n-\u2502   \u251c\u2500\u2500 requirement_gatherer/     # Requirement Gatherer agent: elicits and clarifies requirements\n-\u2502   \u251c\u2500\u2500 task_manager/             # Task Manager agent (NEW - uses older agent structure)\n-\u2502   \u2502   \u251c\u2500\u2500 __init__.py           # (Implied)\n-\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # Defines specific model, standard config\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # Uses older graph structure (call_model, store_memory, etc.)\n-\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # (Implied)\n-\u2502   \u2502   \u251c\u2500\u2500 state.py              # (Implied)\n-\u2502   \u2502   \u2514\u2500\u2500 tools.py              # (Implied, likely with upsert_memory)\n-\u2502   \u2514\u2500\u2500 tester/                   # Tester agent: generates tests based on requirements\n-\u2502       \u251c\u2500\u2500 README.md             # Goal, responsibilities, workflow diagram for Tester\n-\u2502       \u251c\u2500\u2500 configuration.py      # Default model changed to gemini-2.0-flash-lite\n-\u2502       \u251c\u2500\u2500 graph.py              # REVISED: Uses structured output, multi-stage workflow (analyze/generate), no memory store interaction\n-\u2502       \u251c\u2500\u2500 output.py             # Pydantic models for Tester's structured output\n-\u2502       \u251c\u2500\u2500 state.py              # Standard state (messages)\n-\u2502       \u251c\u2500\u2500 test-agent-system-prompt.md # REVISED: System prompt made more succinct, assertive, with clearer guidelines on asking questions, and new workflow/rule sections.\n-\u2502       \u251c\u2500\u2500 test-prompts/         # Example requirements for Tester\n-\u2502       \u2502   \u251c\u2500\u2500 web-api-simple.md # NEW: Simpler web API example\n+\u2502   \u251c\u2500\u2500 grumpy/                   # Grumpy agent\n+\u2502   \u251c\u2500\u2500 orchestrator/             # Orchestrator agent\n+\u2502   \u2502   \u251c\u2500\u2500 memory/\n+\u2502   \u2502   \u2514\u2500\u2500 stubs/\n+\u2502   \u251c\u2500\u2500 requirement_gatherer/     # Requirement Gatherer agent\n+\u2502   \u251c\u2500\u2500 task_manager/             # Task Manager agent\n+\u2502   \u2502   \u251c\u2500\u2500 __init__.py\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py\n+\u2502   \u2502   \u251c\u2500\u2500 state.py\n+\u2502   \u2502   \u2514\u2500\u2500 tools.py\n+\u2502   \u2514\u2500\u2500 tester/                   # Tester agent\n+\u2502       \u251c\u2500\u2500 README.md\n+\u2502       \u251c\u2500\u2500 configuration.py\n+\u2502       \u251c\u2500\u2500 graph.py\n+\u2502       \u251c\u2500\u2500 output.py\n+\u2502       \u251c\u2500\u2500 state.py\n+\u2502       \u251c\u2500\u2500 test-agent-system-prompt.md\n+\u2502       \u251c\u2500\u2500 test-prompts/\n+\u2502       \u2502   \u251c\u2500\u2500 web-api-simple.md\n \u2502       \u2502   \u2514\u2500\u2500 web-api.md\n-\u2502       \u251c\u2500\u2500 tools.py              # Defines upsert_memory, but NOT used by current graph.py\n-\u2502       \u2514\u2500\u2500 utils.py              # Standard utils\n+\u2502       \u251c\u2500\u2500 tools.py\n+\u2502       \u2514\u2500\u2500 utils.py\n \u2514\u2500\u2500 tests/                        # Automated tests\n     \u251c\u2500\u2500 datasets/                 # Scripts for creating LangSmith datasets\n-    \u2502   \u251c\u2500\u2500 coder_dataset.py      # Defines LangSmith dataset for Coder agent evaluation\n+    \u2502   \u251c\u2500\u2500 coder_dataset.py\n     \u2502   \u251c\u2500\u2500 requirement_gatherer_dataset.py\n-    \u2502   \u2514\u2500\u2500 task_manager_dataset.py # Defines LangSmith dataset for Task Manager agent\n+    \u2502   \u2514\u2500\u2500 task_manager_dataset.py\n     \u251c\u2500\u2500 integration_tests/        # Integration tests for agents and full graph functionality\n-    \u2502   \u251c\u2500\u2500 test_architect_agent.py # Tests for Architect agent\n-    \u2502   \u251c\u2500\u2500 test_coder.py         # REVISED: Basic integration tests for Coder, uses coder_new_pr_config. Advanced eval moved.\n-    \u2502   \u251c\u2500\u2500 eval_coder.py         # NEW: Custom evaluation framework for Coder agent (coder_new_pr flow) using openevals and LangSmith.\n-    \u2502   \u251c\u2500\u2500 test_graph.py         # Tests agent_template memory\n+    \u2502   \u251c\u2500\u2500 test_architect_agent.py # UPDATED: Minor formatting fix\n+    \u2502   \u251c\u2500\u2500 test_code_reviewer_agent.py # UPDATED: Uses new config, fixed eval key\n+    \u2502   \u251c\u2500\u2500 test_coder.py         # UPDATED: Import paths for common GitHub components\n+    \u2502   \u251c\u2500\u2500 eval_coder.py         # UPDATED: Import paths for common GitHub components\n+    \u2502   \u251c\u2500\u2500 test_graph.py\n     \u2502   \u251c\u2500\u2500 test_grumpy_agent.py\n     \u2502   \u251c\u2500\u2500 test_requirement_gatherer.py\n-    \u2502   \u251c\u2500\u2500 test_task_manager.py  # Tests for Task Manager agent\n-    \u2502   \u2514\u2500\u2500 test_tester_agent.py  # Uses create_async_graph_caller, LLMJudge, custom prompt, specific dataset\n-    \u251c\u2500\u2500 testing/                  # Test utilities,\n-    \u2502   \u251c\u2500\u2500 __init__.py           # REVISED: create_async_graph_caller updated\n-    \u2502   \u251c\u2500\u2500 evaluators.py         # LLM-based evaluators (e.g., LLMJudge)\n-    \u2502   \u2514\u2500\u2500 formatter.py          # Utilities for formatting/printing evaluation results\n+    \u2502   \u251c\u2500\u2500 test_task_manager.py\n+    \u2502   \u2514\u2500\u2500 test_tester_agent.py\n+    \u251c\u2500\u2500 testing/                  # Test utilities\n+    \u2502   \u251c\u2500\u2500 __init__.py\n+    \u2502   \u251c\u2500\u2500 evaluators.py\n+    \u2502   \u2514\u2500\u2500 formatter.py\n     \u2514\u2500\u2500 unit_tests/               # Unit tests for isolated components\n         \u2514\u2500\u2500 test_configuration.py\n ```"
  }
}