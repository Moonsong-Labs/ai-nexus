{
  "inputs": {
    "repository": "Moonsong-Labs/ai-nexus",
    "pr_num": "79"
  },
  "outputs": {
    "output": "diff --git a/project_memories/global.md b/project_memories/global.md\nindex 09c57b1..44a70a6 100644\n--- a/project_memories/global.md\n+++ b/project_memories/global.md\n@@ -14,11 +14,11 @@\n 5.  **System Prompts:** Detailed system prompts define each agent's role, behavior, constraints, and interaction protocols.\n 6.  **Configuration Management:** Agents have configurable parameters, including LLM models, system prompts, and memory settings (e.g., `use_static_mem`). This is managed via:\n     *   `Configuration` dataclasses from `agent_template`.\n-    *   A common `BaseConfiguration` in `src/common/config.py`.\n-    *   Agent-specific `Configuration` dataclasses (e.g., in `src/orchestrator/configuration.py`, `src/requirement_gatherer/configuration.py`) that subclass `BaseConfiguration`.\n+    *   A common `AgentConfiguration` (formerly `BaseConfiguration`) in `src/common/config.py`.\n+    *   Agent-specific `Configuration` dataclasses (e.g., in `src/orchestrator/configuration.py`, `src/requirement_gatherer/configuration.py`) that subclass `AgentConfiguration`.\n 7.  **Asynchronous Operations:** The system heavily utilizes `async` and `await` for non-blocking operations within the agent graphs.\n 8.  **`langmem` Integration:** Provides semantic memory capabilities (storage, search) for agents, typically managed via the `Agent` class and `SemanticMemory` component for agents following the `agent_template`. Other agents like Requirement Gatherer might implement memory tools differently.\n-9.  **`AgentGraph` (NEW):** A common base class (`src/common/graph.py`) for defining agent graphs, promoting modularity. Used by Orchestrator and Requirement Gatherer. Its `__init__` method now takes `base_config: BaseConfiguration`.\n+9.  **`AgentGraph` (NEW):** A common base class (`src/common/graph.py`) for defining agent graphs, promoting modularity. Used by Orchestrator, Requirement Gatherer, and Coder. Its `__init__` method now takes `name: str` and `agent_config: Optional[AgentConfiguration]`.\n \n \n ## 2. The Memory Bank System (Shift from Conceptual to `langmem`)\n@@ -68,7 +68,7 @@ This file outlines the overarching standards and technological choices for the A\n     *   **CI Pipeline (`.github/workflows/checks.yml`):** Runs linting (Ruff, codespell), unit tests (`make test_unit`), and Coder integration tests (`make test_coder`). The Coder tests job requires `GOOGLE_API_KEY` as a secret.\n *   **Version Control:** Git.\n *   **LLM Models:**\n-    *   **`gemini-1.5-flash-latest` / `gemini-2.5-flash-preview-04-17` (or similar flash variants):** Preferred for simple tasks, quick evaluations. (`agent_template` default updated to `gemini-2.5-flash-preview-04-17`). Orchestrator and Requirement Gatherer default to `google_genai:gemini-2.0-flash` via `BaseConfiguration`.\n+    *   **`gemini-1.5-flash-latest` / `gemini-2.5-flash-preview-04-17` (or similar flash variants):** Preferred for simple tasks, quick evaluations. (`agent_template` default updated to `gemini-2.5-flash-preview-04-17`). Orchestrator and Requirement Gatherer default to `google_genai:gemini-2.0-flash` via `AgentConfiguration`.\n     *   **`gemini-1.5-pro-latest` (or similar pro variants):** Preferred for complex tasks needing reasoning.\n \n \n@@ -78,7 +78,7 @@ AI Nexus employs a few architectural patterns for its agents:\n \n **4.1. `agent_template` based Architecture (e.g., Code Reviewer, Grumpy)**\n \n-Most agents in AI Nexus follow a common structural and operational pattern, largely derived from `src/agent_template/`. *Note: Some agents, like the Tester, Coder, or Task Manager, may deviate significantly from this template's graph logic or tool usage.*\n+Most agents in AI Nexus follow a common structural and operational pattern, largely derived from `src/agent_template/`. *Note: Some agents, like the Tester, or Task Manager, may deviate significantly from this template's graph logic or tool usage.*\n \n *   **Typical Agent Directory Structure:** (As previously described)\n *   **`configuration.py` (Typical Structure - `src/agent_template/configuration.py`):** (As previously described, with `use_static_mem` and updated default model)\n@@ -90,29 +90,30 @@ Most agents in AI Nexus follow a common structural and operational pattern, large\n *   **`src/common/components/memory.py` (NEW):** (As previously described, `SemanticMemory` class, static memory loading, `langmem` tool creation)\n *   **`prompts.py` (`src/agent_template/prompts.py`):** (As previously described, instruction to mention memory retrieval)\n \n-**4.2. `AgentGraph` based Architecture (NEW - e.g., Orchestrator, Requirement Gatherer)**\n+**4.2. `AgentGraph` based Architecture (NEW - e.g., Orchestrator, Requirement Gatherer, Coder)**\n \n A newer pattern utilizes a common base class for more modular graph definitions.\n \n-*   **`src/common/config.py` (NEW):**\n+*   **`src/common/config.py` (REVISED):**\n     ```python\n     from dataclasses import dataclass\n+    from typing import Optional # Assuming Optional might be used, though not in the snippet\n \n     @dataclass(kw_only=True)\n-    class BaseConfiguration: # RENAMED from Configuration\n+    class AgentConfiguration: # RENAMED from BaseConfiguration (which was renamed from Configuration)\n         user_id: str = \"default\"\n-        model: str = \"google_genai:gemini-2.0-flash\"\n-        provider: str | None = None\n+        model: str = \"google_genai:gemini-2.0-flash\" # Example default\n+        provider: Optional[str] = None\n         # Agent-specific prompts or other configs are added in subclasses\n     ```\n-*   **`src/common/graph.py` (NEW):**\n+*   **`src/common/graph.py` (REVISED):**\n     *   Defines an abstract base class `AgentGraph(ABC)`.\n-    *   `__init__(base_config: BaseConfiguration, checkpointer, store)`: Initializes with common config (type updated to `BaseConfiguration`), optional checkpointer and store.\n+    *   `__init__(self, name: str, agent_config: Optional[AgentConfiguration], checkpointer, store)`: Initializes with a graph name, common config (type updated to `Optional[AgentConfiguration]`), optional checkpointer and store.\n     *   `create_builder() -> StateGraph` (abstract method): To be implemented by subclasses to define the graph.\n     *   `compiled_graph`: Property to get or compile the graph.\n     *   `ainvoke(state, config)`: Invokes the compiled graph, merging instance config with call-time config.\n \n-Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and define their specific `Configuration` (subclassing `common.config.BaseConfiguration` in their respective new `configuration.py` files) and graph structure. Graph construction is more modular, often using factory functions to create nodes and tools.\n+Agents like Orchestrator, Requirement Gatherer, and now Coder subclass `AgentGraph`. Orchestrator and Requirement Gatherer define their specific `Configuration` (subclassing `common.config.AgentConfiguration` in their respective `configuration.py` files). Coder currently uses `AgentConfiguration` directly. Graph construction is more modular.\n \n \n ## 5. Specific Agent Details\n@@ -120,7 +121,7 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n #### 5.1. Orchestrator (`src/orchestrator/`)\n *   **Architecture:** Uses the `AgentGraph` pattern. `OrchestratorGraph` in `src/orchestrator/graph.py` subclasses `common.graph.AgentGraph`.\n *   **Configuration (`src/orchestrator/configuration.py` - NEW FILE, REPLACING INLINE CONFIG):**\n-    *   Defines its own `Configuration` dataclass in `src/orchestrator/configuration.py`, subclassing `common.config.BaseConfiguration`.\n+    *   Defines its own `Configuration` dataclass in `src/orchestrator/configuration.py`, subclassing `common.config.AgentConfiguration`.\n     *   `system_prompt: str = prompts.get_prompt()` (which now formats current `time` into the prompt).\n     *   The dedicated `src/orchestrator/configuration.py` file from a previous state was deleted, but this PR re-introduces it with the new structure.\n     *   **`src/orchestrator/graph.py` now defines `AgentsConfig` dataclass** to manage agent stubs (e.g., `requirements.use_stub`) and agent-specific features (e.g., `requirements.use_human_ai`).\n@@ -135,7 +136,7 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n     *   The `Delegate` tool's Pydantic model now includes a mandatory `content: str` field.\n     *   The `store_memory` tool is still bound to the LLM used by the `orchestrate` node. The `delegate_to` logic can route to a memorizer stub if `store_memory` tool is called.\n *   **Stubs (`src/orchestrator/stubs/__init__.py`):**\n-    *   `RequirementsGathererStub` now subclasses `common.graph.AgentGraph` and its `__init__` takes `config: Optional[BaseConfiguration]`.\n+    *   `RequirementsGathererStub` now subclasses `common.graph.AgentGraph` and its `__init__` takes `config: Optional[AgentConfiguration]`.\n *   **State (`src/orchestrator/state.py`):** Docstring updated.\n \n #### 5.2. Architect (`src/architect/`)\n@@ -154,9 +155,17 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n \n #### 5.3. Coder (`src/coder/`)\n *   **Role:** Software developer agent responsible for writing and modifying code in a GitHub repository. It can create new pull requests or implement changes on existing ones.\n-*   **Graph Logic (`src/coder/graph.py`):**\n-    *   Defines configurations for different coding tasks, e.g., `coder_new_pr_config()` for new PRs and `coder_change_request_config()` for modifying existing PRs.\n-    *   The `coder_change_request_config()` now allows the agent to use the `get_pull_request_head_branch` tool among its available GitHub tools.\n+*   **Architecture (REVISED):** The Coder agent's graph instantiation now uses the `AgentGraph` pattern.\n+    *   `CoderNewPRGraph` and `CoderChangeRequestGraph` classes in `src/coder/graph.py` subclass `common.graph.AgentGraph`.\n+    *   These classes take `github_tools`, an optional `agent_config: AgentConfiguration` (from `common.configuration`), `checkpointer`, and `store` in their `__init__`.\n+    *   They implement the `create_builder` method, which reuses the existing `coder_new_pr_config().graph_builder()` and `coder_change_request_config().graph_builder()` logic respectively to define the graph structure.\n+*   **Graph Logic (`src/coder/graph.py` - REVISED STRUCTURE):**\n+    *   The functions `coder_new_pr_config()` (for new PRs) and `coder_change_request_config()` (for modifying existing PRs) still define the core graph configuration (nodes, edges, system prompts) and return an object with a `graph_builder` method.\n+    *   The `coder_change_request_config()` allows the agent to use the `get_pull_request_head_branch` tool.\n+    *   The `CallModel` class and `_graph_builder` helper function remain as internal details for these configuration functions.\n+    *   The file now exports `CoderNewPRGraph` and `CoderChangeRequestGraph`.\n+*   **`lg_server.py` (`src/coder/lg_server.py` - UPDATED):**\n+    *   Instantiates `CoderNewPRGraph` and `CoderChangeRequestGraph` directly, passing `github_tools`, to get the compiled graphs.\n *   **Prompts (`src/coder/prompts.py`):**\n     *   `CHANGE_REQUEST_SYSTEM_PROMPT`: Updated to instruct the agent that when implementing changes on an existing pull request, it will be given the PR number and needs to work on the PR's head branch. It should sync with the latest changes on the PR's head branch and submit changes there.\n *   **Tools:**\n@@ -165,7 +174,7 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n     *   The mock GitHub API (`src/common/components/github_mocks.py`) has been updated:\n         *   The `get_pull_request` method now returns a simplified dictionary containing essential PR details (title, number, body, comments, commits).\n         *   A `get_pull_request_head_branch` method was added to support mocking the new tool.\n-*   (Other files like `__init__.py`, `lg_server.py`, `mocks.py`, `state.py`, `tools.py` specific to the coder, and `README.md` are as previously described in the project structure, if detailed.)\n+*   (Other files like `__init__.py`, `mocks.py`, `state.py`, `tools.py` specific to the coder, and `README.md` are as previously described in the project structure, if detailed.)\n \n #### 5.4. Code Reviewer (`src/code_reviewer/`)\n *   (No changes mentioned in PR - assumed same as previous state, follows `agent_template` and uses `langmem`)\n@@ -176,7 +185,7 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n #### 5.6. Requirement Gatherer (`src/requirement_gatherer/`)\n *   **Architecture:** Major refactor. Uses the `AgentGraph` pattern. `RequirementsGathererGraph` in `src/requirement_gatherer/graph.py` subclasses `common.graph.AgentGraph`.\n *   **Configuration (`src/requirement_gatherer/configuration.py` - NEW FILE, REPLACING INLINE CONFIG):**\n-    *   Defines its own `Configuration` dataclass in `src/requirement_gatherer/configuration.py`, subclassing `common.config.BaseConfiguration`.\n+    *   Defines its own `Configuration` dataclass in `src/requirement_gatherer/configuration.py`, subclassing `common.config.AgentConfiguration`.\n     *   `gatherer_system_prompt: str = prompts.SYSTEM_PROMPT`.\n     *   The dedicated `src/requirement_gatherer/configuration.py` file from a previous state was deleted, but this PR re-introduces it with the new structure.\n     *   `RequirementsGathererGraph.__init__` now accepts `use_human_ai` parameter to control human feedback simulation.\n@@ -218,13 +227,16 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n *   **`tests/integration_tests/test_requirement_gatherer.py`:**\n     *   Updated to use the new `RequirementsGathererGraph`.\n     *   Still uses `create_async_graph_caller` and `LLMJudge` for evaluation against LangSmith datasets.\n-*   **`tests/integration_tests/test_coder.py`:**\n-    *   Added a new test `test_coder_changes_server_port_on_existing_pr`. This test verifies that the Coder agent, using `coder_change_request_config`, correctly applies changes to the head branch of an existing pull request. It utilizes the `MockGithubApi` for setting up the test scenario.\n+*   **`tests/integration_tests/test_coder.py` (UPDATED):**\n+    *   Tests updated to instantiate `CoderNewPRGraph` and `CoderChangeRequestGraph` instead of using the older config functions directly to build and compile the graph.\n+    *   Added a new test `test_coder_changes_server_port_on_existing_pr`. This test verifies that the Coder agent, using `CoderChangeRequestGraph` (instantiated from `coder_change_request_config`), correctly applies changes to the head branch of an existing pull request. It utilizes the `MockGithubApi` for setting up the test scenario.\n     *   These tests are now executed as part of the CI pipeline in a dedicated \"Coder Tests\" job (defined in `.github/workflows/checks.yml`), requiring the `GOOGLE_API_KEY` secret.\n+*   **`tests/integration_tests/eval_coder.py` (UPDATED):**\n+    *   Updated to use `CoderNewPRGraph` for invoking the agent.\n *   **`tests/unit_tests/test_configuration.py`:**\n     *   The previous test `test_configuration_from_none()` related to `orchestrator.configuration.Configuration` is removed as that file is deleted. A dummy test `test_foo()` might be present.\n *   **`src/orchestrator/test.py` (Local test script):**\n-    *   Updated to instantiate `OrchestratorGraph` using `AgentsConfig` and `BaseConfiguration`.\n+    *   Updated to instantiate `OrchestratorGraph` using `AgentsConfig` and `AgentConfiguration`.\n     *   Demonstrates setting `agents_config.requirements.use_stub = False` and `agents_config.requirements.use_human_ai = True`.\n \n \n@@ -279,8 +291,8 @@ ai-nexus/\n \u2502   \u2502   \u2514\u2500\u2500 system_prompt.md\n \u2502   \u251c\u2500\u2500 coder/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # UPDATED: coder_change_request_config includes new tool\n-\u2502   \u2502   \u251c\u2500\u2500 lg_server.py\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # UPDATED: Refactored to use CoderNewPRGraph and CoderChangeRequestGraph (subclassing AgentGraph)\n+\u2502   \u2502   \u251c\u2500\u2500 lg_server.py          # UPDATED: Instantiates new CoderGraph classes\n \u2502   \u2502   \u251c\u2500\u2500 mocks.py\n \u2502   \u2502   \u251c\u2500\u2500 prompts.py            # UPDATED: CHANGE_REQUEST_SYSTEM_PROMPT modified\n \u2502   \u2502   \u251c\u2500\u2500 state.py\n@@ -291,25 +303,25 @@ ai-nexus/\n \u2502   \u2502   \u2502   \u251c\u2500\u2500 github_mocks.py   # UPDATED: Mock API updated for new tool and PR info\n \u2502   \u2502   \u2502   \u251c\u2500\u2500 github_tools.py   # UPDATED: Added GetPullRequestHeadBranch tool\n \u2502   \u2502   \u2502   \u2514\u2500\u2500 memory.py\n-\u2502   \u2502   \u251c\u2500\u2500 config.py             # REVISED: Defines BaseConfiguration\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: AgentGraph __init__ updated\n+\u2502   \u2502   \u251c\u2500\u2500 config.py             # REVISED: Defines AgentConfiguration (formerly BaseConfiguration)\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: AgentGraph __init__ updated (takes name, agent_config)\n \u2502   \u2502   \u2514\u2500\u2500 utils/\n \u2502   \u251c\u2500\u2500 grumpy/\n \u2502   \u251c\u2500\u2500 orchestrator/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n-\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW (re-added with new structure): Specific Configuration subclassing BaseConfiguration\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW (re-added with new structure): Specific Configuration subclassing AgentConfiguration\n \u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, AgentsConfig, factory functions for nodes\n \u2502   \u2502   \u251c\u2500\u2500 memory/\n \u2502   \u2502   \u2502   \u2514\u2500\u2500 team.md           # UPDATED: Delegate tool must include content\n \u2502   \u2502   \u251c\u2500\u2500 prompts.py            # UPDATED: System prompt includes {time}\n \u2502   \u2502   \u251c\u2500\u2500 state.py              # REVISED: Docstring\n \u2502   \u2502   \u251c\u2500\u2500 stubs/\n-\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py       # UPDATED: RequirementsGathererStub __init__ takes BaseConfiguration\n-\u2502   \u2502   \u251c\u2500\u2500 test.py               # REVISED: Uses AgentsConfig, BaseConfiguration\n+\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py       # UPDATED: RequirementsGathererStub __init__ takes AgentConfiguration\n+\u2502   \u2502   \u251c\u2500\u2500 test.py               # REVISED: Uses AgentsConfig, AgentConfiguration\n \u2502   \u2502   \u2514\u2500\u2500 tools.py              # UPDATED: Delegate tool requires 'content'\n \u2502   \u251c\u2500\u2500 requirement_gatherer/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n-\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW (re-added with new structure): Specific Configuration subclassing BaseConfiguration\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW (re-added with new structure): Specific Configuration subclassing AgentConfiguration\n \u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, factory functions for nodes, new tool usage\n \u2502   \u2502   \u251c\u2500\u2500 prompts.py            # REVISED: System prompt updated for new tools/workflow, evaluator prompt removed\n \u2502   \u2502   \u251c\u2500\u2500 state.py              # REVISED: 'veredict' removed, 'summary' added, docstring\n@@ -323,8 +335,8 @@ ai-nexus/\n     \u2502   \u2514\u2500\u2500 task_manager_dataset.py\n     \u251c\u2500\u2500 integration_tests/\n     \u2502   \u251c\u2500\u2500 test_architect_agent.py\n-    \u2502   \u251c\u2500\u2500 test_coder.py           # UPDATED: New test added for PR head branch changes; now run in CI\n-    \u2502   \u251c\u2500\u2500 eval_coder.py\n+    \u2502   \u251c\u2500\u2500 test_coder.py           # UPDATED: Uses new CoderGraph classes; New test added for PR head branch changes; now run in CI\n+    \u2502   \u251c\u2500\u2500 eval_coder.py           # UPDATED: Uses new CoderNewPRGraph class\n     \u2502   \u251c\u2500\u2500 test_graph.py\n     \u2502   \u251c\u2500\u2500 test_grumpy_agent.py\n     \u2502   \u251c\u2500\u2500 test_orchestrator.py    # UPDATED: Uses new OrchestratorGraph"
  }
}