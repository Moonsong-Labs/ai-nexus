{
  "inputs": {
    "repository": "Moonsong-Labs/ai-nexus",
    "pr_num": "95"
  },
  "outputs": {
    "output": "diff --git a/project_memories/global.md b/project_memories/global.md\nindex aa570ea..26425f5 100644\n--- a/project_memories/global.md\n+++ b/project_memories/global.md\n@@ -185,7 +185,9 @@ Agents like Orchestrator, Requirement Gatherer, Coder, and `AgentTemplateGraph`\n     *   Invocation of sub-graphs (e.g., `requirements_graph`) now uses `compiled_graph.ainvoke` (e.g., `await requirements_graph.compiled_graph.ainvoke(...)`).\n     *   `AgentsConfig` dataclass removed.\n *   **Stubs (`src/orchestrator/stubs/__init__.py` - REVISED):**\n-    *   `RequirementsGathererStub.__init__` now takes `agent_config`.\n+    *   `RequirementsGathererStub.__init__` now takes `agent_config` and explicitly passes `name=\"Requirements Gatherer Stub\"` to its parent `AgentGraph` constructor.\n+    *   `RequirementsGathererStub.create_builder()` now returns a simple `StateGraph` based on `requirement_gatherer.state.State`. This graph has a single \"run\" node that returns a predefined message and summary, mimicking the previous stub behavior. This allows the stub to have a `compiled_graph`.\n+    *   The custom `ainvoke` method in `RequirementsGathererStub` has been removed, as its logic is now part of the graph created by `create_builder`.\n \n #### 5.2. Architect (`src/architect/`)\n *   (No changes mentioned in PR - likely still follows its previous custom structure. The `agent_template.agent.Agent` class it might have implicitly relied on for examples is now DELETED. Still uses its own `upsert_memory`.)\n@@ -237,6 +239,8 @@ Agents like Orchestrator, Requirement Gatherer, Coder, and `AgentTemplateGraph`\n     *   Updated to use `AgentTemplateGraph(agent_config=config).compiled_graph` for testing the agent template's graph.\n *   **`tests/integration_tests/test_requirement_gatherer.py` (UPDATED):**\n     *   Updated to use `RequirementsGraph` (renamed from `RequirementsGathererGraph`).\n+*   **`tests/integration_tests/test_orchestrator.py` (UPDATED):**\n+    *   Updated to use `OrchestratorGraph().compiled_graph` for invoking the orchestrator graph in tests, aligning with the standard invocation pattern.\n *   **`tests/datasets/task_manager_dataset.py` (UPDATED):**\n     *   Corrected a typographical error in an output message.\n *   (Other test files as previously described)\n@@ -343,7 +347,7 @@ ai-nexus/\n \u2502   \u2502   \u251c\u2500\u2500 prompts.py\n \u2502   \u2502   \u251c\u2500\u2500 state.py\n \u2502   \u2502   \u251c\u2500\u2500 stubs/\n-\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py       # UPDATED: Stub uses AgentConfiguration\n+\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py       # UPDATED: RequirementsGathererStub uses AgentConfiguration, creates a dummy graph in create_builder, ainvoke removed\n \u2502   \u2502   \u2514\u2500\u2500 tools.py\n \u2502   \u251c\u2500\u2500 requirement_gatherer/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n@@ -368,7 +372,7 @@ ai-nexus/\n     \u2502   \u251c\u2500\u2500 eval_coder.py\n     \u2502   \u251c\u2500\u2500 test_graph.py           # UPDATED: Uses AgentTemplateGraph(agent_config=config).compiled_graph\n     \u2502   \u251c\u2500\u2500 test_grumpy_agent.py\n-    \u2502   \u251c\u2500\u2500 test_orchestrator.py\n+    \u2502   \u251c\u2500\u2500 test_orchestrator.py    # UPDATED: Uses OrchestratorGraph().compiled_graph\n     \u2502   \u251c\u2500\u2500 test_requirement_gatherer.py # UPDATED: Uses RequirementsGraph\n     \u2502   \u251c\u2500\u2500 test_task_manager.py\n     \u2502   \u2514\u2500\u2500 test_tester_agent.py"
  }
}