{
  "inputs": {
    "repository": "Moonsong-Labs/ai-nexus",
    "pr_num": "54"
  },
  "outputs": {
    "output": "diff --git a/project_memories/global.md b/project_memories/global.md\nindex 2dd89fc..72288ad 100644\n--- a/project_memories/global.md\n+++ b/project_memories/global.md\n@@ -169,7 +169,7 @@ This file outlines the overarching standards and technological choices for the A\n \n ## 4. General Agent Architecture (based on `src/agent_template/` and common patterns)\n \n-Most agents in AI Nexus follow a common structural and operational pattern, largely derived from `src/agent_template/`. *Note: Some agents, like the Tester agent, may deviate significantly from this template's graph logic.*\n+Most agents in AI Nexus follow a common structural and operational pattern, largely derived from `src/agent_template/`. *Note: Some agents, like the Tester agent and Coder agent, may deviate significantly from this template's graph logic and structure.*\n \n *   **Typical Agent Directory Structure:**\n     *   `__init__.py`: Exposes the agent's graph.\n@@ -344,7 +344,7 @@ Most agents in AI Nexus follow a common structural and operational pattern, large\n         *   **Memorizer:** Uses `store_memory` tool (renamed to `Memory` tool in `tools.py`). `origin` field tracks requester. Use ONLY when explicitly asked to remember/memorize.\n         *   **Requirements Gatherer:** Uses `Delegate` tool with `to=\"requirements\"`.\n         *   **Architect:** Uses `Delegate` tool with `to=\"architect\"`.\n-        *   **Coder:** Uses `Delegate` tool with `to=\"coder\"`.\n+        *   **Coder:** Uses `Delegate` tool with `to=\"coder\"`. (Note: The Coder agent has been split into `coder_new_pr` and `coder_change_request`. The Orchestrator's awareness of this split or how it routes to the correct Coder flow is TBD and may require a frontend or Orchestrator update.)\n         *   **Tester:** Uses `Delegate` tool with `to=\"tester\"`.\n         *   **Code Reviewer:** Uses `Delegate` tool with `to=\"reviewer\"`.\n         *   MUST use `Delegate` or `store_memory` (Memory) tools.\n@@ -418,43 +418,41 @@ Most agents in AI Nexus follow a common structural and operational pattern, large\n \n #### 5.3. Coder (`src/coder/`)\n \n-*   **Role:** Software developer, writes code, interacts with GitHub repositories.\n+*   **Role:** Software developer, writes code, interacts with GitHub repositories. This role is now split into two specialized agent flows: `coder_new_pr` for creating new Pull Requests and `coder_change_request` for handling changes on existing PRs. Each flow uses a distinct system prompt and a tailored set of GitHub tools.\n *   **`prompts.py` (`src/coder/prompts.py`):**\n-    *   `SYSTEM_PROMPT = \"You are a software developer whose task is to write code.\"` (This is a basic prompt; a more detailed one might be used in a production scenario).\n+    *   `NEW_PR_SYSTEM_PROMPT`: \"You are a software developer whose task is to write code. You are linked to a GitHub repository that has a `main` branch. You will receive an instruction of a change that needs to be implemented. From that instruction you will need to sync with the latest changes in the main branch and then submit a pull request that satisfies the request. You should NEVER submit changes on `main` you cannot ever write to it. Instead the work should be done on a branch called `code-agent-*`, where * is a single word describing the change.\"\n+    *   `CHANGE_REQUEST_SYSTEM_PROMPT`: \"You are a software developer whose task is to write code. You are linked to a GitHub repository. You will receive an instruction of a change that needs to be implemented on an existing pull request (either by PR number or branch). From that instruction you will need to sync with the latest changes on the PR branch and then submit a pull request that satisfies the request. You should submit changes on the PR branch.\"\n *   **`tools.py` (`src/coder/tools.py`):**\n-    *   `GITHUB_TOOLS`: A list of specific GitHub tool names to be used: `create_file`, `read_file`, `update_file`, `delete_file`, `get_contents` (renamed from `get_files_from_directory`), `create_pull_request`, `create_branch`.\n-    *   `github_tools()`:\n-        *   Uses `GitHubAPIWrapper` and `GitHubToolkit` from `langchain_community.agent_toolkits` to create actual GitHub tools.\n-        *   `make_gemini_compatible(tool)`: Adapts tool schema if needed (e.g., by ensuring descriptions are present).\n-        *   Returns a list of selected GitHub tools.\n+    *   `GITHUB_TOOLS`: A list of GitHub tool names intended to be available: `create_branch`, `set_active_branch`, `get_files_from_directory`, `create_pull_request`, `create_file`, `update_file`, `read_file`, `delete_file`, `get_pull_request`, `list_pull_requests_files`.\n+    *   `get_github_tools(source)`:\n+        *   Takes a `source` (either `GitHubAPIWrapper` or `MockGithubApi`).\n+        *   If `source` is `GitHubAPIWrapper`, uses `GitHubToolkit` to get real GitHub tools.\n+        *   If `source` is `MockGithubApi`, calls `mock_github_tools(source)`.\n+        *   Filters the obtained tools to include only those whose names are in the `GITHUB_TOOLS` list.\n     *   `mock_github_tools(mock_api: MockGithubApi)`:\n-        *   Creates mocked versions of GitHub tools using `RunnableLambda` that call methods on a `MockGithubApi` instance.\n-        *   Tools created: `create_file`, `read_file`, `update_file`, `delete_file`, `get_contents`, `create_pull_request`, `create_branch`.\n-        *   Some tools like `update_file` and `create_file` have their arguments schema converted to a string input for the mock.\n+        *   Creates mocked versions of GitHub tools.\n+        *   Tools created include: `set_active_branch`, `create_a_new_branch` (maps to `mock_api.create_branch`), `get_files_from_directory`, `create_pull_request`, `create_file`, `update_file`, `read_file`, `delete_file`, `get_pull_request`, `list_pull_requests_files`.\n *   **`mocks.py` (`src/coder/mocks.py`):**\n     *   `MockGithubApi`: A class that simulates a GitHub API for testing.\n-        *   Maintains a mock file system (`self.files` as a nested dict), branches (`self.branches`), active branch (`self.active_branch`), and logs operations (`self.operations`).\n-        *   Methods: `set_active_branch`, `create_branch` (handles unique naming), `_get_files_recursive`, `get_files_from_directory` (renamed to `get_contents` in tools), `create_pull_request`, `create_file`, `update_file`, `delete_file`, `read_file`.\n+        *   Maintains a mock file system (`self.files`), branches (`self.branches`), active branch (`self.active_branch`), and logs operations (`self.operations`).\n+        *   Methods: `set_active_branch`, `create_branch`, `get_files_from_directory`, `create_pull_request`, `create_file`, `update_file`, `delete_file`, `read_file`, **`get_pull_request`**, **`list_pull_requests_files`**.\n *   **`graph.py` (`src/coder/graph.py`):**\n-    *   Initializes LLM (e.g., `gemini-1.5-flash-latest` or `gemini-2.0-flash` as per file).\n-    *   Uses `mock_github_tools` by default (can be switched to real `github_tools()`).\n-    *   `call_model` node:\n-        *   Signature: `async def call_model(state: State) -> dict` (Note: no `config` or `store` passed directly if not using memory features from template).\n-        *   Constructs messages list including the `SYSTEM_PROMPT`.\n-        *   Binds the `github_tools` (mocked or real) to the LLM.\n-        *   Invokes LLM: `await llm.bind_tools(github_tools).ainvoke(messages)`.\n-        *   Returns `{\"messages\": [messages_after_invoke]}`.\n-    *   `ToolNode(tools=github_tools)`: Handles execution of GitHub tool calls from the LLM.\n-    *   Flow:\n-        *   Entry point: `call_model`.\n-        *   Conditional edge from `call_model` based on tool calls:\n-            *   If tool calls: to `execute_tools` (the `ToolNode`).\n-            *   Else: to `END`.\n-        *   Edge from `execute_tools` back to `call_model` (to allow the LLM to respond after tool execution).\n+    *   The Coder agent's graph logic is modularized using `CoderInstanceConfig` to support the two distinct flows.\n+    *   **`CoderInstanceConfig` (dataclass):** Holds `name`, `system_prompt` (specific to the flow), and `github_tools` (a list of tool names required for that flow, e.g., `\"create_a_new_branch\"`). It includes a `graph_builder` method to construct a `StateGraph` using its specific configuration and a `filter_tools` method to select the required tools from a provided toolset.\n+    *   **Configuration Functions:**\n+        *   `coder_new_pr_config()`: Returns `CoderInstanceConfig` for \"Coder | New PR\". Uses `NEW_PR_SYSTEM_PROMPT`. Requested tools: `set_active_branch`, `create_a_new_branch`, `get_files_from_a_directory`, `create_pull_request`, `create_file`, `update_file`, `read_file`, `delete_file`.\n+        *   `coder_change_request_config()`: Returns `CoderInstanceConfig` for \"Coder | Change Request\". Uses `CHANGE_REQUEST_SYSTEM_PROMPT`. Requested tools: `set_active_branch`, `get_files_from_a_directory`, `create_file`, `update_file`, `read_file`, `delete_file`, `get_pull_request`, `list_pull_requests_files`.\n+    *   **Graph Construction (`_graph_builder`):** A private `_graph_builder` function takes the filtered list of GitHub tools and the specific system prompt to build the graph.\n+    *   **`CallModel` Node:** The `CallModel` class's constructor now accepts a `system_prompt` argument, which is used with the agent's messages when invoking the LLM. It binds the tools specific to its configuration.\n+    *   **ToolNode and Flow:** The graph structure: `__start__` -> `call_model` -> (conditional: `tools_condition`) -> `tools` (ToolNode for executing GitHub tools) -> `call_model` / `__end__`.\n+*   **LangGraph Server Exposure (`src/coder/lg_server.py`):**\n+    *   Two distinct graphs, `graph_new_pr` and `graph_change_request`, are compiled and exposed for the LangGraph server.\n+    *   `get_github_source()` function: Dynamically selects between the real `GitHubAPIWrapper` (if `GITHUB_APP_ID`, `GITHUB_APP_PRIVATE_KEY`, `GITHUB_REPOSITORY` environment variables are set) and the `MockGithubApi`. This allows the server instance of the Coder agent to use live GitHub interactions.\n+    *   The `graph_new_pr` and `graph_change_request` are compiled using their respective configurations from `src/coder/graph.py` and the `github_tools` derived from `get_github_source()`.\n *   **`state.py` (`src/coder/state.py`):**\n     *   `class State(TypedDict): messages: Annotated[list, add_messages]`\n *   **`README.md` (`src/coder/README.md`):**\n-    *   Instructions for setting up a GitHub App with necessary permissions (Contents R/W, Pull requests R/W, Commit statuses R, Issues R/W, Metadata R) and environment variables (`GITHUB_APP_ID`, `GITHUB_APP_PRIVATE_KEY`, `GITHUB_REPOSITORY`).\n+    *   Instructions for setting up a GitHub App with necessary permissions and environment variables remain relevant for using the Coder agent with real GitHub tools.\n \n #### 5.4. Code Reviewer (`src/code_reviewer/`)\n \n@@ -661,10 +659,13 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n         *   Uses `LLMJudge` from `tests.testing.evaluators` to create a `correctness_evaluator` with a specific prompt for judging Grumpy's output.\n         *   The `create_graph_caller` utility is used to wrap the Grumpy agent's graph for evaluation.\n     *   **`test_coder.py`:**\n-        *   Defines a custom evaluator `evaluate_code` using an LLM judge (`judge_llm`) and a specific prompt (`EVAL_PROMPT`) to score and comment on the Coder agent's output based on the input code state, user request, and expected outcomes.\n-        *   The `evaluate_code_scorer` helper function returns a `(score, comment)` tuple.\n-        *   Defines an `invoke_agent` function to run the Coder agent (using mocked GitHub tools) with inputs structured according to `CodeEvaluatorInputs`.\n-        *   Includes a test `test_coder_run_eval_dataset` that uses `langsmith.aevaluate` to run the `invoke_agent` function against the `CODER_DATASET_NAME` LangSmith dataset, using the custom `evaluate_code` evaluator.\n+        *   Contains integration tests for specific Coder agent scenarios (e.g., creating a 'hello world' file, renaming a function). These tests now primarily use the `coder_new_pr_config()` (from `src/coder/graph.py`) to build and test the new PR creation flow with `MockGithubApi`. The more complex LangSmith dataset evaluation logic has been moved to `tests/integration_tests/eval_coder.py`.\n+    *   **`eval_coder.py` (New File):**\n+        *   This file is dedicated to evaluating the `coder_new_pr` agent flow using LangSmith datasets.\n+        *   Defines `EVAL_PROMPT`: A detailed prompt for an LLM judge (`gemini-2.0-flash`) to review and score the Coder agent's trajectory (sequence of messages and tool calls) based on initial code, user input, and expected outcomes. The rubric emphasizes correct branch creation, satisfaction of all expectations, no unrelated changes, and no new bugs.\n+        *   `evaluate_code_scorer` and `evaluate_code`: Functions that use the LLM judge to produce a score (0-1) and a comment.\n+        *   `invoke_agent(inputs: CodeEvaluatorInputs)`: An async function that sets up `MockGithubApi` with `inputs[\"starting_code\"]`, compiles the `coder_new_pr` graph (using `coder_new_pr_config`), and invokes it with `inputs[\"user_input\"]`.\n+        *   `test_coder_run_eval_dataset`: A pytest test that uses `langsmith.aevaluate` to run `invoke_agent` against the `CODER_DATASET_NAME` LangSmith dataset, using `evaluate_code` as the custom evaluator.\n \n *   **`tests/testing/__init__.py`:**\n     *   `get_logger()`: Utility to create a Python logger with a default format.\n@@ -708,7 +709,7 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n     *   `make test-tester`: Runs integration tests specifically for the Tester agent (`uv run -- pytest -rs tests/integration_tests/test_tester_agent.py`).\n *   **Configuration:** `.env` file (copied from `.env.example`) for environment variables.\n     *   Required for Google AI services: `GOOGLE_API_KEY` (this is the preferred variable). Alternatively, `GEMINI_API_KEY` can be set; scripts will use `GOOGLE_API_KEY` if present, otherwise they will use `GEMINI_API_KEY`.\n-    *   Optional for Coder agent: `GITHUB_APP_ID`, `GITHUB_APP_PRIVATE_KEY`, `GITHUB_REPOSITORY`.\n+    *   Optional for Coder agent (for real GitHub interaction): `GITHUB_APP_ID`, `GITHUB_APP_PRIVATE_KEY`, `GITHUB_REPOSITORY`.\n     *   Optional for LangSmith: `LANGCHAIN_API_KEY`, `LANGCHAIN_TRACING_V2`, `LANGCHAIN_ENDPOINT`, `LANGCHAIN_PROJECT`.\n *   **CI/CD (GitHub Actions):**\n     *   Workflow defined in `.github/workflows/checks.yml`.\n@@ -720,7 +721,10 @@ The project uses `pytest` for testing and integrates with LangSmith for evaluati\n     *   Integration tests (`make test_integration`) are commented out in the `checks.yml` file, indicating they might be run separately or are pending full CI integration.\n *   **LangGraph Studio:**\n     *   The project can be opened in LangGraph Studio for visualization, interaction, and debugging.\n-    *   `langgraph.json` can be used to set the default graph to open in Studio (e.g., by setting `default_graph`).\n+    *   `langgraph.json` can be used to set the default graph to open in Studio. It has been updated to reflect the Coder agent split:\n+        *   `\"coder\"` entry removed.\n+        *   `\"coder_new_pr\": \"./src/coder/lg_server.py:graph_new_pr\"`\n+        *   `\"coder_change_request\": \"./src/coder/lg_server.py:graph_change_request\"`\n     *   The README provides a badge/link to open the project directly in LangGraph Studio using a GitHub URL.\n *   **Adding New Agents:**\n     1.  Copy the `src/agent_template/` directory and rename it.\n@@ -746,7 +750,7 @@ ai-nexus/\n \u2502       \u251c\u2500\u2500 review-coding.md      # Context for Grumpy's code review\n \u2502       \u251c\u2500\u2500 review-designing.md   # Context for Grumpy's design review\n \u2502       \u2514\u2500\u2500 role.md               # Core operational rules and Mermaid diagram for Grumpy\n-\u251c\u2500\u2500 langgraph.json                # LangGraph Studio configuration (e.g., default graph)\n+\u251c\u2500\u2500 langgraph.json                # LangGraph Studio configuration (Coder split into coder_new_pr and coder_change_request)\n \u251c\u2500\u2500 project_memories/             # Project-wide standards, global context\n \u2502   \u251c\u2500\u2500 PRD.md                    # Product Requirements Document: standards, tech stack, goals\n \u2502   \u2514\u2500\u2500 global.md                 # High-level project mission, \"Cursor\" Memory Bank concept\n@@ -765,8 +769,14 @@ ai-nexus/\n \u2502   \u2502   \u2514\u2500\u2500 prompts/v0.md         # Detailed system prompt for Architect\n \u2502   \u251c\u2500\u2500 code_reviewer/            # Code Reviewer agent: reviews code for quality\n \u2502   \u2502   \u2514\u2500\u2500 system_prompt.md      # System prompt for Code Reviewer\n-\u2502   \u251c\u2500\u2500 coder/                    # Coder agent: writes code, interacts with GitHub\n-\u2502   \u2502   \u251c\u2500\u2500 mocks.py              # Mock GitHub API for testing\n+\u2502   \u251c\u2500\u2500 coder/                    # Coder agent: writes code, interacts with GitHub (split into new_pr and change_request flows)\n+\u2502   \u2502   \u251c\u2500\u2500 __init__.py           # Exposes graph_new_pr and graph_change_request\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # Defines CoderInstanceConfig and config functions (coder_new_pr_config, coder_change_request_config) for building specialized Coder graphs\n+\u2502   \u2502   \u251c\u2500\u2500 lg_server.py          # Compiles graph_new_pr and graph_change_request for server, handles real/mock GitHub tools\n+\u2502   \u2502   \u251c\u2500\u2500 mocks.py              # Mock GitHub API, with new methods get_pull_request, list_pull_requests_files\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # Contains NEW_PR_SYSTEM_PROMPT and CHANGE_REQUEST_SYSTEM_PROMPT\n+\u2502   \u2502   \u251c\u2500\u2500 state.py              # State definition for Coder agent\n+\u2502   \u2502   \u251c\u2500\u2500 tools.py              # Defines GitHub tools, including new get_pull_request, list_pull_requests_files. GITHUB_TOOLS list updated.\n \u2502   \u2502   \u2514\u2500\u2500 README.md             # Setup instructions for GitHub App\n \u2502   \u251c\u2500\u2500 common/                   # Common utilities shared across agents\n \u2502   \u2502   \u2514\u2500\u2500 utils/                # Shared utility functions\n@@ -792,7 +802,8 @@ ai-nexus/\n     \u2502   \u251c\u2500\u2500 coder_dataset.py      # NEW: Defines LangSmith dataset for Coder agent evaluation\n     \u2502   \u2514\u2500\u2500 requirement_gatherer_dataset.py\n     \u251c\u2500\u2500 integration_tests/        # Integration tests for agents and full graph functionality\n-    \u2502   \u251c\u2500\u2500 test_coder.py         # REVISED: Uses LangSmith dataset and custom evaluator for Coder agent\n+    \u2502   \u251c\u2500\u2500 eval_coder.py         # NEW: LangSmith evaluation for coder_new_pr agent flow using LLM judge\n+    \u2502   \u251c\u2500\u2500 test_coder.py         # REVISED: Simpler integration tests for coder_new_pr flow; LLM-based dataset evaluation moved to eval_coder.py\n     \u2502   \u251c\u2500\u2500 test_graph.py         # Tests agent_template memory\n     \u2502   \u251c\u2500\u2500 test_grumpy_agent.py\n     \u2502   \u251c\u2500\u2500 test_requirement_gatherer.py"
  }
}