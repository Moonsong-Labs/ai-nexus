{
  "inputs": {
    "repository": "Moonsong-Labs/ai-nexus",
    "pr_num": "81"
  },
  "outputs": {
    "output": "diff --git a/project_memories/global.md b/project_memories/global.md\nindex 09c57b1..7e2774f 100644\n--- a/project_memories/global.md\n+++ b/project_memories/global.md\n@@ -13,12 +13,11 @@\n 4.  **Tool-Using Agents:** Agents are equipped with tools to perform actions, interact with systems (like GitHub), and manage their memory (using `langmem` tools or custom tools like `file_dump`, or agent-specific tools like the Requirement Gatherer's `memorize` and `human_feedback`).\n 5.  **System Prompts:** Detailed system prompts define each agent's role, behavior, constraints, and interaction protocols.\n 6.  **Configuration Management:** Agents have configurable parameters, including LLM models, system prompts, and memory settings (e.g., `use_static_mem`). This is managed via:\n-    *   `Configuration` dataclasses from `agent_template`.\n-    *   A common `BaseConfiguration` in `src/common/config.py`.\n-    *   Agent-specific `Configuration` dataclasses (e.g., in `src/orchestrator/configuration.py`, `src/requirement_gatherer/configuration.py`) that subclass `BaseConfiguration`.\n+    *   `Configuration` dataclasses (e.g., in `src/agent_template/configuration.py`, `src/orchestrator/configuration.py`, `src/requirement_gatherer/configuration.py`, `src/task_manager/configuration.py`) that subclass `common.configuration.AgentConfiguration`.\n+    *   A common `AgentConfiguration` in `src/common/configuration.py` (NEW, REPLACING `BaseConfiguration` from the deleted `src/common/config.py`).\n 7.  **Asynchronous Operations:** The system heavily utilizes `async` and `await` for non-blocking operations within the agent graphs.\n 8.  **`langmem` Integration:** Provides semantic memory capabilities (storage, search) for agents, typically managed via the `Agent` class and `SemanticMemory` component for agents following the `agent_template`. Other agents like Requirement Gatherer might implement memory tools differently.\n-9.  **`AgentGraph` (NEW):** A common base class (`src/common/graph.py`) for defining agent graphs, promoting modularity. Used by Orchestrator and Requirement Gatherer. Its `__init__` method now takes `base_config: BaseConfiguration`.\n+9.  **`AgentGraph` (NEW):** A common base class (`src/common/graph.py`) for defining agent graphs, promoting modularity. Used by Orchestrator and Requirement Gatherer (now `RequirementsGraph`). Its `__init__` method now takes `name: str` and `agent_config: AgentConfiguration`.\n \n \n ## 2. The Memory Bank System (Shift from Conceptual to `langmem`)\n@@ -29,11 +28,11 @@ The original \"Memory Bank\" concept described a system of structured Markdown fil\n Other agents, like the Requirement Gatherer, now use custom tools (e.g., `memorize`) that might interact with the same underlying storage mechanism but are defined and invoked differently within their specific graph structure.\n \n *   **Storage:** Memories are stored in a `BaseStore` (e.g., `InMemoryStore` configured with embeddings like `GoogleGenerativeAIEmbeddings`).\n-*   **Namespace:** Memories are typically namespaced by `(\"memories\", \"semantic\", user_id)` or `(\"memories\", \"static\", user_id)`.\n+*   **Namespace:** Memories are typically namespaced by `(\"memories\", \"semantic\", user_id)` or `(\"memories\", \"static\", user_id)`. The `user_id` is part of `AgentConfiguration`.\n *   **Tools:**\n     *   `agent_template` based agents: Use `langmem`-provided tools (`manage_memory`, `search_memory`) via `SemanticMemory`. A custom `memory_dump` tool is also available.\n     *   Requirement Gatherer: Uses a custom `memorize` tool (defined in `src/requirement_gatherer/tools.py`, refactored from a previous `upsert_memory` function in the same file) for storing memories.\n-*   **Static Memories:** The concept of static, pre-loaded knowledge persists. JSON files in `.langgraph/static_memories/` can be loaded into the `BaseStore` under a static namespace if `use_static_mem` is enabled in the agent's configuration.\n+*   **Static Memories:** The concept of static, pre-loaded knowledge persists. JSON files in `.langgraph/static_memories/` can be loaded into the `BaseStore` under a static namespace if `use_static_mem` (part of `MemoryConfiguration` within `AgentConfiguration`) is enabled in the agent's configuration.\n *   **Shift:** The shift moves from human-readable Markdown files as the primary memory source to a database/store queried semantically via tools. The core principle of externalized memory remains, but the implementation mechanism has evolved. The specific file structure (`projectbrief.md`, `productContext.md`, etc.) described previously is not directly implemented by the `langmem` system, although the *types* of information they represent might be stored as individual memories.\n \n \n@@ -68,7 +67,7 @@ This file outlines the overarching standards and technological choices for the A\n     *   **CI Pipeline (`.github/workflows/checks.yml`):** Runs linting (Ruff, codespell), unit tests (`make test_unit`), and Coder integration tests (`make test_coder`). The Coder tests job requires `GOOGLE_API_KEY` as a secret.\n *   **Version Control:** Git.\n *   **LLM Models:**\n-    *   **`gemini-1.5-flash-latest` / `gemini-2.5-flash-preview-04-17` (or similar flash variants):** Preferred for simple tasks, quick evaluations. (`agent_template` default updated to `gemini-2.5-flash-preview-04-17`). Orchestrator and Requirement Gatherer default to `google_genai:gemini-2.0-flash` via `BaseConfiguration`.\n+    *   **`gemini-1.5-flash-latest` / `gemini-2.5-flash-preview-04-17` (or similar flash variants):** Preferred for simple tasks, quick evaluations. (`agent_template` default updated to `gemini-2.5-flash-preview-04-17`). Orchestrator and Requirement Gatherer default to `google_genai:gemini-2.0-flash` via `AgentConfiguration`.\n     *   **`gemini-1.5-pro-latest` (or similar pro variants):** Preferred for complex tasks needing reasoning.\n \n \n@@ -81,10 +80,22 @@ AI Nexus employs a few architectural patterns for its agents:\n Most agents in AI Nexus follow a common structural and operational pattern, largely derived from `src/agent_template/`. *Note: Some agents, like the Tester, Coder, or Task Manager, may deviate significantly from this template's graph logic or tool usage.*\n \n *   **Typical Agent Directory Structure:** (As previously described)\n-*   **`configuration.py` (Typical Structure - `src/agent_template/configuration.py`):** (As previously described, with `use_static_mem` and updated default model)\n+*   **`configuration.py` (`src/agent_template/configuration.py`):**\n+    *   Defines `Configuration(AgentConfiguration)`.\n+    *   `system_prompt: str = prompts.SYSTEM_PROMPT`.\n+    *   Default model is `gemini-2.5-flash-preview-04-17`.\n+    *   `memory` field defaults to `MemoryConfiguration(use_memory=True, use_static_mem=False)`.\n *   **`state.py` (Typical Structure - `src/agent_template/state.py`):** (As previously described, with `user_id`)\n *   **`agent.py` (NEW - `src/agent_template/agent.py`):** (As previously described, handles LLM interaction and `langmem` via `SemanticMemory`)\n-*   **`graph.py` (Core Logic - Revised Flow from `src/agent_template/graph.py`):** (As previously described, uses `Agent` class, `ToolNode`, `tools_condition`)\n+*   **`graph.py` (Core Logic - Revised Flow from `src/agent_template/graph.py`):**\n+    *   `AgentTemplateGraph` subclasses `AgentGraph`.\n+    *   `__init__(self, *, agent_config: Optional[Configuration] = None, ...)`: Takes `agent_config` (of type `agent_template.configuration.Configuration`). If `agent_config` is None, it defaults to `Configuration(memory=MemoryConfiguration(use_memory=True), system_prompt=SYSTEM_PROMPT)`.\n+    *   `create_builder()`:\n+        *   Initializes LLM using `self._agent_config.model`.\n+        *   A local factory `_create_call_model(llm)` creates the `call_model` node.\n+        *   The `call_model` async function (returned by the factory) retrieves `agent_config` from `config[\"configurable\"][\"agent_config\"]` to access `system_prompt`.\n+        *   Adds `call_model` node. If tools exist, adds `ToolNode` (\"tools\").\n+        *   Edges: `START` -> `call_model_function_name`. `call_model_function_name` conditionally routes to `tools_condition` (then to \"tools\" or END) or directly to END if no tools. \"tools\" routes back to `call_model_function_name`.\n *   **`tools.py` (Utility Tools - `src/agent_template/tools.py`):** (As previously described, `file_dump` tool, `upsert_memory` removed)\n *   **`memory.py` (`src/agent_template/memory.py`):** DELETED.\n *   **`src/common/components/memory.py` (NEW):** (As previously described, `SemanticMemory` class, static memory loading, `langmem` tool creation)\n@@ -94,40 +105,59 @@ Most agents in AI Nexus follow a common structural and operational pattern, large\n \n A newer pattern utilizes a common base class for more modular graph definitions.\n \n-*   **`src/common/config.py` (NEW):**\n+*   **`src/common/configuration.py` (NEW, REPLACING `src/common/config.py`):**\n     ```python\n-    from dataclasses import dataclass\n+    from dataclasses import dataclass, field\n+    from typing import Any\n+    from common.components.memory import MemoryConfiguration\n+\n+    _LANGGRAPH_CONFIGURABLES = [\"user_id\", \"model\", \"provider\"]\n \n     @dataclass(kw_only=True)\n-    class BaseConfiguration: # RENAMED from Configuration\n+    class AgentConfiguration: # RENAMED from BaseConfiguration\n+        # langgraph config\n         user_id: str = \"default\"\n         model: str = \"google_genai:gemini-2.0-flash\"\n         provider: str | None = None\n-        # Agent-specific prompts or other configs are added in subclasses\n+        # extended config\n+        memory: MemoryConfiguration = field(default_factory=MemoryConfiguration)\n+\n+        @property\n+        def langgraph_configurables(self) -> dict[str, Any]:\n+            \"\"\"Returns a dictionary of langgraph configurable fields.\"\"\"\n+            return {\n+                k: v for k, v in self.__dict__.items() if k in _LANGGRAPH_CONFIGURABLES\n+            }\n     ```\n *   **`src/common/graph.py` (NEW):**\n     *   Defines an abstract base class `AgentGraph(ABC)`.\n-    *   `__init__(base_config: BaseConfiguration, checkpointer, store)`: Initializes with common config (type updated to `BaseConfiguration`), optional checkpointer and store.\n+    *   `__init__(self, *, name: str, agent_config: AgentConfiguration, checkpointer, store)`: Initializes with agent `name`, `agent_config` (type updated to `AgentConfiguration`), optional checkpointer and store. `self._agent_config` stores the configuration.\n     *   `create_builder() -> StateGraph` (abstract method): To be implemented by subclasses to define the graph.\n     *   `compiled_graph`: Property to get or compile the graph.\n-    *   `ainvoke(state, config)`: Invokes the compiled graph, merging instance config with call-time config.\n+    *   `ainvoke(state, config)`: Invokes the compiled graph, merging instance config with call-time config using an updated `_merge_config` method.\n+    *   `_merge_config(config)`: Merges `self._agent_config.langgraph_configurables` with `config`, and adds the full `self._agent_config` as `config[\"configurable\"][\"agent_config\"]`.\n+    *   The generic `_create_call_model` method has been REMOVED from `AgentGraph`.\n \n-Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and define their specific `Configuration` (subclassing `common.config.BaseConfiguration` in their respective new `configuration.py` files) and graph structure. Graph construction is more modular, often using factory functions to create nodes and tools.\n+Agents like Orchestrator and Requirement Gatherer (now `RequirementsGraph`) subclass `AgentGraph` and define their specific `Configuration` (subclassing `common.configuration.AgentConfiguration` in their respective `configuration.py` files) and graph structure. Graph construction is more modular, often using factory functions to create nodes and tools.\n \n \n ## 5. Specific Agent Details\n \n #### 5.1. Orchestrator (`src/orchestrator/`)\n *   **Architecture:** Uses the `AgentGraph` pattern. `OrchestratorGraph` in `src/orchestrator/graph.py` subclasses `common.graph.AgentGraph`.\n-*   **Configuration (`src/orchestrator/configuration.py` - NEW FILE, REPLACING INLINE CONFIG):**\n-    *   Defines its own `Configuration` dataclass in `src/orchestrator/configuration.py`, subclassing `common.config.BaseConfiguration`.\n+    *   `OrchestratorGraph.__init__` now takes `agent_config: Optional[orchestrator.configuration.Configuration]` instead of `agents_config` and `base_config`.\n+*   **Configuration (`src/orchestrator/configuration.py`):**\n+    *   Defines its own `Configuration` dataclass, subclassing `common.configuration.AgentConfiguration`.\n     *   `system_prompt: str = prompts.get_prompt()` (which now formats current `time` into the prompt).\n-    *   The dedicated `src/orchestrator/configuration.py` file from a previous state was deleted, but this PR re-introduces it with the new structure.\n-    *   **`src/orchestrator/graph.py` now defines `AgentsConfig` dataclass** to manage agent stubs (e.g., `requirements.use_stub`) and agent-specific features (e.g., `requirements.use_human_ai`).\n+    *   Defines `SubAgentConfig` and `RequirementsAgentConfig(SubAgentConfig)`.\n+    *   `Configuration` now includes fields like `requirements_agent: RequirementsAgentConfig`, `architect_agent: SubAgentConfig`, etc.\n+    *   `RequirementsAgentConfig` holds `use_stub: bool` and `config: RequirementsConfiguration` (from `requirement_gatherer.configuration`).\n *   **Graph Logic (`src/orchestrator/graph.py`):**\n-    *   The `orchestrate` node (created by `_create_orchestrate` factory) uses the system prompt from the config (including current time). LLM is initialized within `create_builder`.\n+    *   The `orchestrate` node (created by `_create_orchestrate` factory) uses the system prompt from `self._agent_config.system_prompt` (including current time). LLM is initialized within `create_builder` using `self._agent_config.model`.\n     *   The `delegate_to` routing function (created by `_create_delegate_to` factory) is updated.\n-    *   Integrates other agent graphs/stubs; for example, it can instantiate and use `RequirementsGathererGraph` (or `RequirementsGathererStub`) based on `AgentsConfig`. The `requirements` node is created by `_create_requirements_node` factory.\n+    *   Integrates other agent graphs/stubs; for example, it can instantiate and use `RequirementsGraph` (or `RequirementsGathererStub`) based on `self._agent_config.requirements_agent`. The `requirements` node is created by `_create_requirements_node` factory, which now takes `requirements_graph: RequirementsGraph`.\n+    *   The `AgentsConfig` dataclass previously defined in this file is REMOVED (its functionality is now part of `orchestrator.configuration.Configuration`).\n+    *   Langsmith example graph instantiation updated to use the new `Configuration` structure.\n *   **Prompts (`src/orchestrator/prompts.py`):**\n     *   `ORCHESTRATOR_SYSTEM_PROMPT` (and the one constructed by `get_prompt()`) now includes a `{time}` placeholder, formatted with the current time during graph execution.\n     *   `src/orchestrator/memory/team.md`: Updated to specify that the `Delegate` tool usage MUST include the `content` field for the delegated task.\n@@ -135,7 +165,7 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n     *   The `Delegate` tool's Pydantic model now includes a mandatory `content: str` field.\n     *   The `store_memory` tool is still bound to the LLM used by the `orchestrate` node. The `delegate_to` logic can route to a memorizer stub if `store_memory` tool is called.\n *   **Stubs (`src/orchestrator/stubs/__init__.py`):**\n-    *   `RequirementsGathererStub` now subclasses `common.graph.AgentGraph` and its `__init__` takes `config: Optional[BaseConfiguration]`.\n+    *   `RequirementsGathererStub` now subclasses `common.graph.AgentGraph` and its `__init__` takes `agent_config: Optional[AgentConfiguration]`.\n *   **State (`src/orchestrator/state.py`):** Docstring updated.\n \n #### 5.2. Architect (`src/architect/`)\n@@ -153,19 +183,7 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n     *   `utils.py`: Standard `split_model_and_provider`, `init_chat_model`.\n \n #### 5.3. Coder (`src/coder/`)\n-*   **Role:** Software developer agent responsible for writing and modifying code in a GitHub repository. It can create new pull requests or implement changes on existing ones.\n-*   **Graph Logic (`src/coder/graph.py`):**\n-    *   Defines configurations for different coding tasks, e.g., `coder_new_pr_config()` for new PRs and `coder_change_request_config()` for modifying existing PRs.\n-    *   The `coder_change_request_config()` now allows the agent to use the `get_pull_request_head_branch` tool among its available GitHub tools.\n-*   **Prompts (`src/coder/prompts.py`):**\n-    *   `CHANGE_REQUEST_SYSTEM_PROMPT`: Updated to instruct the agent that when implementing changes on an existing pull request, it will be given the PR number and needs to work on the PR's head branch. It should sync with the latest changes on the PR's head branch and submit changes there.\n-*   **Tools:**\n-    *   Utilizes a suite of GitHub tools provided by `src/common/components/github_tools.py`. This suite is configured via the `GITHUB_TOOLS` list in the same file.\n-    *   A new tool `get_pull_request_head_branch` (implemented as `GetPullRequestHeadBranch` class) has been added to this suite. This tool allows the agent to fetch the head branch name of a pull request given its number. It is available in both live (via `GitHubAPIWrapper`) and mock (via `MockGithubApi`) environments.\n-    *   The mock GitHub API (`src/common/components/github_mocks.py`) has been updated:\n-        *   The `get_pull_request` method now returns a simplified dictionary containing essential PR details (title, number, body, comments, commits).\n-        *   A `get_pull_request_head_branch` method was added to support mocking the new tool.\n-*   (Other files like `__init__.py`, `lg_server.py`, `mocks.py`, `state.py`, `tools.py` specific to the coder, and `README.md` are as previously described in the project structure, if detailed.)\n+*   (No changes mentioned in PR - assumed same as previous state)\n \n #### 5.4. Code Reviewer (`src/code_reviewer/`)\n *   (No changes mentioned in PR - assumed same as previous state, follows `agent_template` and uses `langmem`)\n@@ -174,24 +192,25 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n *   (No changes mentioned in PR - assumed same as previous state, custom graph, revised prompt)\n \n #### 5.6. Requirement Gatherer (`src/requirement_gatherer/`)\n-*   **Architecture:** Major refactor. Uses the `AgentGraph` pattern. `RequirementsGathererGraph` in `src/requirement_gatherer/graph.py` subclasses `common.graph.AgentGraph`.\n-*   **Configuration (`src/requirement_gatherer/configuration.py` - NEW FILE, REPLACING INLINE CONFIG):**\n-    *   Defines its own `Configuration` dataclass in `src/requirement_gatherer/configuration.py`, subclassing `common.config.BaseConfiguration`.\n+*   **Architecture:** Major refactor. `RequirementsGathererGraph` RENAMED to `RequirementsGraph`. Uses the `AgentGraph` pattern. `RequirementsGraph` in `src/requirement_gatherer/graph.py` subclasses `common.graph.AgentGraph`.\n+    *   `RequirementsGraph.__init__` now takes `agent_config: Optional[requirement_gatherer.configuration.Configuration]`.\n+*   **Configuration (`src/requirement_gatherer/configuration.py`):**\n+    *   Defines its own `Configuration` dataclass, subclassing `common.configuration.AgentConfiguration`.\n     *   `gatherer_system_prompt: str = prompts.SYSTEM_PROMPT`.\n-    *   The dedicated `src/requirement_gatherer/configuration.py` file from a previous state was deleted, but this PR re-introduces it with the new structure.\n-    *   `RequirementsGathererGraph.__init__` now accepts `use_human_ai` parameter to control human feedback simulation.\n+    *   Added `use_human_ai: bool = False` field.\n *   **Graph Logic (`src/requirement_gatherer/graph.py`):**\n-    *   The graph consists of a `call_model` node (created by `_create_call_model` factory) and a `ToolNode` (\"tools\"). LLM and tools are initialized within `create_builder`.\n-    *   `call_model`: Retrieves memories, formats them into the system prompt (which includes current time), and invokes an LLM bound with new tools.\n+    *   The graph consists of a `call_model` node (created by `_create_call_model` factory) and a `ToolNode` (\"tools\"). LLM and tools are initialized within `create_builder` using `self._agent_config.model` and `self._agent_config.use_human_ai` for `create_human_feedback_tool`.\n+    *   `call_model` (the async function returned by `_create_call_model` factory): Retrieves memories, formats them into the system prompt (which includes current time from `self._agent_config.gatherer_system_prompt`), and invokes an LLM bound with new tools. It gets `user_id` from `config[\"configurable\"][\"user_id\"]` and `agent_config` from `config[\"configurable\"][\"agent_config\"]`.\n     *   `ToolNode`: Executes tools like `human_feedback`, `memorize`, `summarize`.\n     *   Routing: `START` -> `call_model`. `call_model` routes to `tools` if tool calls are present, or back to `call_model` or `END` if a summary is generated. `tools` routes back to `call_model`. This logic is encapsulated in a route function created by `_create_gather_requirements` factory.\n     *   The previous `call_evaluator_model` and `Veredict`-based flow is REMOVED.\n+    *   Langsmith example graph instantiation updated.\n *   **State (`src/requirement_gatherer/state.py`):**\n     *   `State` dataclass now has `messages: Annotated[list[AnyMessage], add_messages]` and `summary: str = \"\"`. Docstring updated.\n     *   The `veredict` field has been REMOVED.\n *   **Tools (`src/requirement_gatherer/tools.py`):**\n     *   Tools are now more modular and defined in `tools.py`:\n-        *   `human_feedback`: Tool created by `create_human_feedback_tool(use_human_ai=False)` factory. Can request feedback from a human (via `interrupt`) or simulate human responses using an AI if `use_human_ai` is true. Prints interaction to console.\n+        *   `create_human_feedback_tool(use_human_ai=False)` factory: The returned `human_feedback` async tool function now retrieves `agent_config` from `config[\"configurable\"][\"agent_config\"]` to access `agent_config.use_human_ai`.\n         *   `memorize(content: str, context: str, ...)`: Tool to upsert a memory. Uses `store.aput` with `(\"memories\", user_id)`. This tool is a refactoring of the previous `upsert_memory` function from this file.\n         *   `summarize(summary: str, ...)`: Tool to indicate the agent has produced a final summary. Updates state with the summary and prints to console.\n     *   The `upsert_memory` function in `src/requirement_gatherer/tools.py` has been refactored and renamed to the `memorize` tool.\n@@ -203,33 +222,47 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n         *   Instructs to use the `summarize` tool when no questions are pending and a report is generated.\n         *   Details a new workflow involving these tools.\n         *   The `EVALUATOR_SYSTEM_PROMPT` has been REMOVED.\n+*   **`src/requirement_gatherer/utils.py`:** DELETED.\n \n #### 5.7. Grumpy (`src/grumpy/`)\n *   (No changes mentioned in PR - assumed same as previous state, follows `agent_template` and uses `langmem`)\n \n #### 5.8. Task Manager (`src/task_manager/`)\n-*   (No changes mentioned in PR - assumed same as previous state, older agent structure)\n+*   **Configuration (`src/task_manager/configuration.py`):**\n+    *   `Configuration` now subclasses `common.configuration.AgentConfiguration`.\n+*   **Graph Logic (`src/task_manager/graph.py`):**\n+    *   `TaskManagerGraph.__init__` now takes `agent_config: Optional[task_manager.configuration.Configuration]`.\n+    *   `_create_call_model` factory: The returned `call_model` async function now retrieves `agent_config` from `config[\"configurable\"][\"agent_config\"]` to access `agent_config.task_manager_system_prompt`.\n \n \n ## 6. Testing Framework (`tests/`)\n \n+*   **`tests/datasets/task_manager_dataset.py`:** Typo corrected in an output message.\n *   **`tests/integration_tests/test_orchestrator.py`:**\n     *   Updated to use the new `OrchestratorGraph` for testing.\n *   **`tests/integration_tests/test_requirement_gatherer.py`:**\n-    *   Updated to use the new `RequirementsGathererGraph`.\n+    *   Updated to use the new `RequirementsGraph` (renamed from `RequirementsGathererGraph`).\n     *   Still uses `create_async_graph_caller` and `LLMJudge` for evaluation against LangSmith datasets.\n *   **`tests/integration_tests/test_coder.py`:**\n     *   Added a new test `test_coder_changes_server_port_on_existing_pr`. This test verifies that the Coder agent, using `coder_change_request_config`, correctly applies changes to the head branch of an existing pull request. It utilizes the `MockGithubApi` for setting up the test scenario.\n     *   These tests are now executed as part of the CI pipeline in a dedicated \"Coder Tests\" job (defined in `.github/workflows/checks.yml`), requiring the `GOOGLE_API_KEY` secret.\n+*   **`tests/integration_tests/test_graph.py`:**\n+    *   `AgentTemplateGraph` instantiation updated to use `agent_config=config`.\n *   **`tests/unit_tests/test_configuration.py`:**\n     *   The previous test `test_configuration_from_none()` related to `orchestrator.configuration.Configuration` is removed as that file is deleted. A dummy test `test_foo()` might be present.\n-*   **`src/orchestrator/test.py` (Local test script):**\n-    *   Updated to instantiate `OrchestratorGraph` using `AgentsConfig` and `BaseConfiguration`.\n-    *   Demonstrates setting `agents_config.requirements.use_stub = False` and `agents_config.requirements.use_human_ai = True`.\n+*   **`src/demo/orchestrate.py` (NEW - MOVED & REFACTORED from `src/orchestrator/test.py`):**\n+    *   Local demo/test script.\n+    *   Instantiates `OrchestratorGraph` using `orchestrator.configuration.Configuration` and `RequirementsAgentConfig`, `RequirementsConfiguration`.\n+    *   Demonstrates setting `requirements_agent.use_stub = False` and `requirements_agent.config.use_human_ai = True`.\n+    *   Sets recursion limit in `RunnableConfig`.\n+    *   Dumps output to `dump.json`.\n \n \n ## 7. Development Workflow & Tools (from `README.md` & `project_memories/PRD.md`)\n \n+*   **README.md:**\n+    *   Example for adding semantic memory updated to use `AgentConfiguration` and `agent_config` parameter.\n+    *   Added \"Local Demo\" section: `uv run --env-file .env -- python ./src/demo/orchestrate.py exec ai`.\n *   **Make:** Used as a task runner to automate common commands. New targets include:\n     *   `make test_coder`: Runs Coder integration tests (`tests/integration_tests/test_coder.py`).\n *   **CI (`.github/workflows/checks.yml`):**\n@@ -237,38 +270,39 @@ Agents like Orchestrator and Requirement Gatherer now subclass `AgentGraph` and\n         *   Linting (Ruff, codespell)\n         *   Unit tests (`make test_unit`)\n         *   Coder integration tests (`make test_coder`), which requires the `GOOGLE_API_KEY` secret.\n-*   **Ruff Linting:** `pyproject.toml` updated with per-file ignores for `T201` (print statements) in `src/orchestrator/{graph,test}.py` and `src/requirement_gatherer/graph.py` and `src/requirement_gatherer/tools.py`.\n+*   **Ruff Linting:** `pyproject.toml` updated with per-file ignores for `T201` (print statements) in `src/orchestrator/{graph}.py`, `src/requirement_gatherer/graph.py`, `src/requirement_gatherer/tools.py`, and `src/demo/*`. (Note: `src/orchestrator/test.py` is now `src/demo/orchestrate.py`).\n+*   **`.gitignore`:** Added `dump.json`.\n \n \n ## 8. Overall Project Structure Summary\n \n ```\n ai-nexus/\n-\u251c\u2500\u2500 .cursor/                      # NEW: Cursor specific rules\n-\u2502   \u2514\u2500\u2500 rules/                    # NEW\n-\u2502       \u2514\u2500\u2500 read-project-memories.mdc # NEW: Rule to always read project_memories\n+\u251c\u2500\u2500 .cursor/\n+\u2502   \u2514\u2500\u2500 rules/\n+\u2502       \u2514\u2500\u2500 read-project-memories.mdc\n \u251c\u2500\u2500 .env.example\n-\u251c\u2500\u2500 .gitignore\n+\u251c\u2500\u2500 .gitignore                    # UPDATED: Added dump.json\n \u251c\u2500\u2500 .github/\n \u2502   \u2514\u2500\u2500 workflows/\n-\u2502       \u2514\u2500\u2500 checks.yml            # UPDATED: Added Coder Tests job\n-\u251c\u2500\u2500 Makefile                      # UPDATED: Added test_coder target\n-\u251c\u2500\u2500 README.md\n+\u2502       \u2514\u2500\u2500 checks.yml\n+\u251c\u2500\u2500 Makefile\n+\u251c\u2500\u2500 README.md                     # UPDATED: Examples and Local Demo section\n \u251c\u2500\u2500 agent_memories/\n \u2502   \u2514\u2500\u2500 grumpy/\n \u251c\u2500\u2500 langgraph.json\n \u251c\u2500\u2500 project_memories/\n \u2502   \u251c\u2500\u2500 PRD.md\n \u2502   \u2514\u2500\u2500 global.md\n-\u251c\u2500\u2500 pyproject.toml                # UPDATED: Ruff per-file ignores\n+\u251c\u2500\u2500 pyproject.toml                # UPDATED: Ruff per-file ignores for src/demo/*\n \u251c\u2500\u2500 scripts/\n \u2502   \u2514\u2500\u2500 generate_project_memory.sh\n \u251c\u2500\u2500 src/\n \u2502   \u251c\u2500\u2500 agent_template/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n \u2502   \u2502   \u251c\u2500\u2500 agent.py\n-\u2502   \u2502   \u251c\u2500\u2500 configuration.py\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # UPDATED: Subclasses AgentConfiguration\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # UPDATED: Uses agent_config, local _create_call_model\n \u2502   \u2502   \u251c\u2500\u2500 prompts.py\n \u2502   \u2502   \u251c\u2500\u2500 state.py\n \u2502   \u2502   \u2514\u2500\u2500 tools.py\n@@ -279,56 +313,62 @@ ai-nexus/\n \u2502   \u2502   \u2514\u2500\u2500 system_prompt.md\n \u2502   \u251c\u2500\u2500 coder/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # UPDATED: coder_change_request_config includes new tool\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py\n \u2502   \u2502   \u251c\u2500\u2500 lg_server.py\n \u2502   \u2502   \u251c\u2500\u2500 mocks.py\n-\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # UPDATED: CHANGE_REQUEST_SYSTEM_PROMPT modified\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py\n \u2502   \u2502   \u251c\u2500\u2500 state.py\n \u2502   \u2502   \u251c\u2500\u2500 tools.py\n \u2502   \u2502   \u2514\u2500\u2500 README.md\n \u2502   \u251c\u2500\u2500 common/\n \u2502   \u2502   \u251c\u2500\u2500 components/\n-\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_mocks.py   # UPDATED: Mock API updated for new tool and PR info\n-\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_tools.py   # UPDATED: Added GetPullRequestHeadBranch tool\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_mocks.py\n+\u2502   \u2502   \u2502   \u251c\u2500\u2500 github_tools.py\n \u2502   \u2502   \u2502   \u2514\u2500\u2500 memory.py\n-\u2502   \u2502   \u251c\u2500\u2500 config.py             # REVISED: Defines BaseConfiguration\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: AgentGraph __init__ updated\n+\u2502   \u2502   \u251c\u2500\u2500 config.py             # DELETED\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW: Defines AgentConfiguration\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: AgentGraph __init__ takes name, agent_config; _merge_config updated; generic _create_call_model removed\n \u2502   \u2502   \u2514\u2500\u2500 utils/\n+\u2502   \u251c\u2500\u2500 demo/                     # NEW Directory\n+\u2502   \u2502   \u2514\u2500\u2500 orchestrate.py        # NEW (Moved & Refactored from src/orchestrator/test.py)\n \u2502   \u251c\u2500\u2500 grumpy/\n \u2502   \u251c\u2500\u2500 orchestrator/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n-\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW (re-added with new structure): Specific Configuration subclassing BaseConfiguration\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, AgentsConfig, factory functions for nodes\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # REVISED: Subclasses AgentConfiguration, defines SubAgentConfig, RequirementsAgentConfig\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, factory functions for nodes, AgentsConfig dataclass removed\n \u2502   \u2502   \u251c\u2500\u2500 memory/\n-\u2502   \u2502   \u2502   \u2514\u2500\u2500 team.md           # UPDATED: Delegate tool must include content\n-\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # UPDATED: System prompt includes {time}\n-\u2502   \u2502   \u251c\u2500\u2500 state.py              # REVISED: Docstring\n+\u2502   \u2502   \u2502   \u2514\u2500\u2500 team.md\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py\n+\u2502   \u2502   \u251c\u2500\u2500 state.py\n \u2502   \u2502   \u251c\u2500\u2500 stubs/\n-\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py       # UPDATED: RequirementsGathererStub __init__ takes BaseConfiguration\n-\u2502   \u2502   \u251c\u2500\u2500 test.py               # REVISED: Uses AgentsConfig, BaseConfiguration\n-\u2502   \u2502   \u2514\u2500\u2500 tools.py              # UPDATED: Delegate tool requires 'content'\n+\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py       # UPDATED: RequirementsGathererStub __init__ takes agent_config\n+\u2502   \u2502   \u251c\u2500\u2500 test.py               # DELETED (Moved to src/demo/orchestrate.py)\n+\u2502   \u2502   \u2514\u2500\u2500 tools.py\n \u2502   \u251c\u2500\u2500 requirement_gatherer/\n \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n-\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # NEW (re-added with new structure): Specific Configuration subclassing BaseConfiguration\n-\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Uses new Configuration, factory functions for nodes, new tool usage\n-\u2502   \u2502   \u251c\u2500\u2500 prompts.py            # REVISED: System prompt updated for new tools/workflow, evaluator prompt removed\n-\u2502   \u2502   \u251c\u2500\u2500 state.py              # REVISED: 'veredict' removed, 'summary' added, docstring\n-\u2502   \u2502   \u2514\u2500\u2500 tools.py              # REVISED: Defines create_human_feedback_tool, memorize (refactored from upsert_memory), summarize\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # REVISED: Subclasses AgentConfiguration, adds use_human_ai\n+\u2502   \u2502   \u251c\u2500\u2500 graph.py              # REVISED: Renamed to RequirementsGraph, uses new Configuration, factory functions, new tool usage\n+\u2502   \u2502   \u251c\u2500\u2500 prompts.py\n+\u2502   \u2502   \u251c\u2500\u2500 state.py\n+\u2502   \u2502   \u251c\u2500\u2500 tools.py              # REVISED: human_feedback tool uses agent_config.use_human_ai\n+\u2502   \u2502   \u2514\u2500\u2500 utils.py              # DELETED\n \u2502   \u251c\u2500\u2500 task_manager/\n+\u2502   \u2502   \u251c\u2500\u2500 configuration.py      # UPDATED: Subclasses AgentConfiguration\n+\u2502   \u2502   \u2514\u2500\u2500 graph.py              # UPDATED: Uses agent_config\n \u2502   \u2514\u2500\u2500 tester/\n \u2514\u2500\u2500 tests/\n     \u251c\u2500\u2500 datasets/\n     \u2502   \u251c\u2500\u2500 coder_dataset.py\n     \u2502   \u251c\u2500\u2500 requirement_gatherer_dataset.py\n-    \u2502   \u2514\u2500\u2500 task_manager_dataset.py\n+    \u2502   \u2514\u2500\u2500 task_manager_dataset.py # UPDATED: Typo fix\n     \u251c\u2500\u2500 integration_tests/\n     \u2502   \u251c\u2500\u2500 test_architect_agent.py\n-    \u2502   \u251c\u2500\u2500 test_coder.py           # UPDATED: New test added for PR head branch changes; now run in CI\n+    \u2502   \u251c\u2500\u2500 test_coder.py\n     \u2502   \u251c\u2500\u2500 eval_coder.py\n-    \u2502   \u251c\u2500\u2500 test_graph.py\n+    \u2502   \u251c\u2500\u2500 test_graph.py           # UPDATED: Uses agent_config for AgentTemplateGraph\n     \u2502   \u251c\u2500\u2500 test_grumpy_agent.py\n-    \u2502   \u251c\u2500\u2500 test_orchestrator.py    # UPDATED: Uses new OrchestratorGraph\n-    \u2502   \u251c\u2500\u2500 test_requirement_gatherer.py # UPDATED: Uses new RequirementsGathererGraph\n+    \u2502   \u251c\u2500\u2500 test_orchestrator.py\n+    \u2502   \u251c\u2500\u2500 test_requirement_gatherer.py # UPDATED: Uses new RequirementsGraph\n     \u2502   \u251c\u2500\u2500 test_task_manager.py\n     \u2502   \u2514\u2500\u2500 test_tester_agent.py\n     \u251c\u2500\u2500 testing/"
  }
}